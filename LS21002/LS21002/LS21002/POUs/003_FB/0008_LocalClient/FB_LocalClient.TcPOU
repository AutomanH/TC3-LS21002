<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FB_LocalClient" Id="{8f17d0ca-9dd4-4906-96f9-0076506e5ff3}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_LocalClient
VAR_INPUT
	sRemoteServer		: STRING(15) := '192.168.0.3';(* IP adress of remote server *)
	nRemotePort			: UDINT := 1030;
    RecvTime            : TIME ;
	pSendData           : POINTER TO BYTE ;
    SendLen             : INT ;
	pRecvData           : POINTER TO BYTE ;
    RecvLen             : INT := 255 ;


    Start             : BOOL ;
    Send              : BOOL ;
    Recv              : BOOL ;
    Close             : BOOL ;

END_VAR
VAR_OUTPUT
			hSocket				: T_HSOCKET;
			bBusy 				: BOOL;
			bError				: BOOL;
			nErrId				: UDINT;
    Connected           : BOOL ;
    SendOK              : BOOL ;
    RecvOK              : BOOL ;
    Closed              : BOOL ;
    RdyCmd              : BOOL ;
	Done: BOOL;
END_VAR

VAR_IN_OUT
    iStep             : E_ClientSteps;
END_VAR


VAR
	
	
	fbConnect 		: FB_SocketConnect := ( sSrvNetId := ''  );
	fbClose				: FB_SocketClose := ( sSrvNetId := '', tTimeout := DEFAULT_ADS_TIMEOUT );
	fbSocketSend		: FB_SocketSend      := ( sSrvNetID := '', tTimeout := DEFAULT_ADS_TIMEOUT );
	fbSocketReceive        : FB_SocketReceive := ( sSrvNetID := '', tTimeout := DEFAULT_ADS_TIMEOUT );
	fbConnectTON		: TON := ( PT := PLCPRJ_RECONNECT_TIME );
	fbDataExchaTON		: TON := ( PT := PLCPRJ_SEND_CYCLE_TIME );
	fbReceiveTON		: TON;
	fbDisconnectTON      : TON;
    arrayRecive                 : ARRAY [1..1000] OF BYTE ;
	a,b,c,d : BOOL ;

	cbReceived, startPos, endPos, idx	: UDINT;
	cbFrame				: UDINT;
	rxBuffer				: ARRAY[0..MAX_PLCPRJ_RXBUFFER_SIZE] OF BYTE;
	
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE iStep OF
	CLIENT_STATE_IDLE:
	;
	CLIENT_STATE_CONNECT_START:
		  IF ( Connected =  FALSE )
		  THEN
				fbConnectTON( IN := TRUE, PT := PLCPRJ_RECONNECT_TIME );
						IF fbConnectTON.Q THEN
							fbConnectTON( IN := FALSE );
							fbConnect(  bExecute := FALSE  );
							fbConnect(	sRemoteHost		:= sRemoteServer,
										nRemotePort		:= nRemotePort,
										bExecute		:= TRUE );
							iStep := CLIENT_STATE_CONNECT_WAIT;
						END_IF

	    	ELSE
			   iStep := CLIENT_STATE_IDLE;
			END_IF

   CLIENT_STATE_CONNECT_WAIT:
				fbConnect( bExecute := FALSE );
				IF NOT fbConnect.bBusy THEN
					IF NOT fbConnect.bError THEN
						Connected 	:= TRUE;
						hSocket 	:= fbConnect.hSocket;
						iStep := CLIENT_STATE_IDLE;

					ELSE

						nErrId := fbConnect.nErrId;
						iStep := CLIENT_STATE_ERROR;
					END_IF
				END_IF


	CLIENT_STATE_SEND_START:
		fbSocketSend( bExecute := FALSE );
		fbSocketSend( 	hSocket	:= hSocket,
						pSrc	:= pSendData,
						cbLen	:= SendLen,(* string length inclusive zero delimiter *)
						bExecute:= TRUE );
		cbReceived	:= 0 ;
		MEMSET(ADR(rxBuffer),0,SIZEOF(rxBuffer));
		iStep := CLIENT_STATE_SEND_WAIT;

	CLIENT_STATE_SEND_WAIT:
		fbSocketSend( bExecute := FALSE );
		IF NOT fbSocketSend.bBusy THEN
			IF NOT fbSocketSend.bError THEN
				iStep := CLIENT_STATE_IDLE;
			ELSE

				nErrId := fbSocketSend.nErrId;
				iStep := CLIENT_STATE_CLOSE_START;
			END_IF
		END_IF
	CLIENT_STATE_WAITTIME1:
		iStep := CLIENT_STATE_WAITTIME2;
	CLIENT_STATE_WAITTIME2:
		iStep := CLIENT_STATE_RECIVE_START;

	CLIENT_STATE_RECIVE_START:
		fbDisconnectTON(  );
		fbReceiveTON( IN := TRUE );
		IF fbReceiveTON.Q THEN
			fbReceiveTON( IN := FALSE );
			fbSocketReceive( bExecute := FALSE );
			fbSocketReceive(  hSocket:= hSocket,
							pDest:= ADR( rxBuffer ) + cbReceived,
							cbLen:= SIZEOF( rxBuffer ) - cbReceived,
							bExecute:= TRUE );
			iStep := CLIENT_STATE_RECIVE_WAIT;
		END_IF

	CLIENT_STATE_RECIVE_WAIT:
		fbSocketReceive( bExecute := FALSE );
		IF NOT fbSocketReceive.bBusy THEN
			IF NOT fbSocketReceive.bError THEN

				IF (fbSocketReceive.nRecBytes > 0) THEN(* bytes received *)

					startPos 		:= cbReceived;(* rxBuffer array index of first data byte *)
					endPos  		:= cbReceived + fbSocketReceive.nRecBytes  - 1;(* rxBuffer array index of last data byte *)
					cbReceived 	:= cbReceived + fbSocketReceive.nRecBytes;(* calculate the number of received data bytes *)
					cbFrame		:= 0;(* reset frame length *)

					IF cbReceived < RecvLen THEN(* no overflow *)

						fbReceiveTON( PT := T#0s ); (* bytes received => increase the read (polling) speed *)
						fbDisconnectTON( IN := FALSE );(* bytes received => disable timeout check *)

						(* search for string end delimiter *)
						FOR idx := startPos TO endPos BY 1 DO
							IF rxBuffer[idx] = 0 THEN(* string end delimiter found *)
								cbFrame := idx + 1;(* calculate the length of the received string (inclusive the end delimiter) *)
								MEMCPY(  pRecvData, ADR( rxBuffer ), cbFrame );(* copy the received string to the output variable (inclusive the end delimiter) *)
								MEMMOVE( ADR( rxBuffer ), ADR( rxBuffer[cbFrame] ),  cbReceived - cbFrame  );(* move the reamaining data bytes *)
								cbReceived := cbReceived - cbFrame;(* recalculate the reamaining data byte length *)
								a := TRUE ;
								iStep := CLIENT_STATE_IDLE;
								EXIT;
							END_IF
						END_FOR

					ELSE(* there is no more free read buffer space => the answer string should be terminated *)
						b := TRUE ;
						nErrId := PLCPRJ_ERROR_RECEIVE_BUFFER_OVERFLOW;(* buffer overflow !*)
						iStep := CLIENT_STATE_CLOSE_START;
					END_IF

				ELSE(* no bytes received *)
					fbReceiveTON( PT := PLCPRJ_RECEIVE_POLLING_TIME );(* no bytes received => decrease the read (polling) speed *)
					fbDisconnectTON( IN := TRUE, PT := PLCPRJ_RECEIVE_TIMEOUT );(* no bytes received => enable timeout check*)
					IF fbDisconnectTON.Q THEN (* timeout error*)
						fbDisconnectTON( IN := FALSE );
						c := TRUE ;
						nErrID := PLCPRJ_ERROR_RECEIVE_TIMEOUT;
						iStep := CLIENT_STATE_IDLE;
					ELSE(* repeat reading *)
						iStep := CLIENT_STATE_RECIVE_START; (* repeat reading *)
					END_IF
				END_IF
			ELSE(* receive error *)
				d := TRUE ;
				nErrId := fbSocketReceive.nErrId;
				iStep := CLIENT_STATE_CLOSE_START;
			END_IF
		END_IF



	CLIENT_STATE_CLOSE_START:
	    fbClose( bExecute := FALSE );
		fbClose(	hSocket:= hSocket,
				bExecute:= TRUE );
		iStep := CLIENT_STATE_CLOSE_WAIT;

	CLIENT_STATE_CLOSE_WAIT:
		fbClose( bExecute := FALSE );
		IF NOT fbClose.bBusy THEN

			Connected := FALSE;
			MEMSET( ADR(hSocket), 0, SIZEOF(hSocket));
			IF fbClose.bError THEN

				nErrId := fbClose.nErrId;
				iStep := CLIENT_STATE_ERROR;
			ELSE
				bBusy := FALSE;
				bError := FALSE;
				nErrId := 0;
				iStep := CLIENT_STATE_IDLE;
			END_IF
		END_IF

	CLIENT_STATE_ERROR:
		bError := TRUE;
		IF Connected THEN
			iStep := CLIENT_STATE_CLOSE_START;
		ELSE
			bBusy := FALSE;
			(* iStep := CLIENT_STATE_IDLE *);
		END_IF

END_CASE]]></ST>
    </Implementation>
    <LineIds Name="FB_LocalClient">
      <LineId Id="70" Count="1" />
      <LineId Id="292" Count="0" />
      <LineId Id="75" Count="161" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
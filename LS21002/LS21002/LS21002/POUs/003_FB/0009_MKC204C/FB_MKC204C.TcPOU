<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FB_MKC204C" Id="{2d49f1b5-4513-4ffb-b5f6-6ec589b5e9f1}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_MKC204C
(*
********************************************************************************
* Name: FB_MT_MKC_New
*
* Author:  Automanh
* Version: 1.0.0
*
* Description:
*  Re-Write  function block
*
* Remarks:
*
* Revisions:
*   1.0 -AutomanH Rebuild
		1.1- AutomanH 2022.07.27 add Error  FLT_CannotExecutable
														 add Excute Reset Command
*         
*  
*********************************************************************************)
VAR_INPUT
	
	xIReset:						BOOL	:= FALSE;		
	xIInit:  						BOOL ;
	iICodeLEN:					INT:=20;
	iICodePOS:					INT:=1;
	xIDeviceRunning			:BOOL;
	xManualMode					:BOOL;
	xAutoMode						:BOOL;
	stDeviceOpe					:ST_DeviceOpe;//秤体操作
	stpar								:ST_MCK_ParIn;
	stSysPar						:ST_SysPar;
END_VAR
VAR_OUTPUT
	xQRdyCmd:  						BOOL ;
	xQDone     :  				BOOL ;
	strQBarCode  : 				STRING[255];
	xQBusy:							BOOL	:= FALSE;	
	xQError:						BOOL	:= FALSE;	
  xQNoRead:					BOOL	:= FALSE;
	iQErrorNo:				INT;
	stParOut					: ST_MCK_ParOut;//参数输出
END_VAR
VAR_IN_OUT
	
END_VAR

VAR
 		{attribute 'tc_no_symbol'}
    	Waittime           :  TON ;
			{attribute 'tc_no_symbol'}
  		TcpIpClient  :  FB_LocalClient  ;
			{attribute 'tc_no_symbol'}
  		ClientSendBuffer  : ARRAY [1..80] OF BYTE ;
			{attribute 'tc_no_symbol'}
  		ClientRecvBuffer  : ARRAY [1..80] OF BYTE ;
			{attribute 'tc_no_symbol'}
			First  :  BOOL ;
			{attribute 'tc_no_symbol'}
    	strRead    :  STRING[10]    ;
			{attribute 'tc_no_symbol'}
    	strStop    :  STRING[5]  := 'LOFF$R'  ;
			{attribute 'tc_no_symbol'}
    	strBload    :  STRING[8] ;
			{attribute 'tc_no_symbol'}
    	eStepCmd	: E_ClientSteps ;
			{attribute 'tc_no_symbol'}
			strRecv : STRING[40] ;
			{attribute 'tc_no_symbol'}
			Done  : BOOL ;
			iStep     :  INT ;
			strLocalQBarCode  : 				STRING[255];
			iLoadStep: INT;
			xBloadStart: BOOL;
			strBloadResultCode:STRING(20);
			fbTrigger: R_TRIG;
			iCmdStep:INT;
			iCmdOldStep:INT;
			tTimeout:TON;
			eErrorID		: MT_MCK_ERROR;(*错误码*)(* Output: Error ID (defined below) *)
			xStart: BOOL ;
			xBusy:BOOL;
			xDone:BOOL;
			xRdyCmd:	BOOL ;
			xCmd:BOOL;
			OperR_TRIG:ARRAY[1..20] OF R_TRIG;
			i:INT;
	// //操作类型
		iOperType: INT;
		_Stemp: ARRAY[1..2] OF STRING[50];
			_sSendData: STRING(255);
			rTareSet: REAL;
	// 重复接收
	xRepeatReceive: BOOL;
END_VAR

VAR CONSTANT
	iMAX_LENGTH     :  INT := 255 ;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[ACT_Op();
ACT_Cmd();
ACT_Reset();
ACT_Error();
ACT_RW();]]></ST>
    </Implementation>
    <Action Name="ACT_Cmd" Id="{3d79304e-bf25-4502-adcc-76a9e55a7e34}">
      <Implementation>
        <ST><![CDATA[IF  NOT  xQBusy THEN
 		xQRdyCmd:=TRUE;
ELSE
 		xQRdyCmd:=FALSE;	
END_IF
tTimeout(IN:= (iCmdStep =iCmdOldStep) AND (iCmdStep<>0)  AND (iOperType<>14), PT:= T#10S, Q=> , ET=> );
IF		tTimeout.Q THEN
 	xQError:=TRUE;
	eErrorID:=MT_MCK_ERROR.FLT_CMD_TIMEOUT;
END_IF
CASE iCmdStep  OF	
		
		0://等待激活
			IF   xcmd THEN
			 		xQBusy:=TRUE;
					xQDone:=FALSE;
					iCmdStep :=iCmdStep +1;
					xcmd:=FALSE;
			END_IF
		1://指令
				iCmdStep :=iCmdStep +1;
				iCmdOldStep:=iCmdStep;
		2://开始执行
				xStart :=TRUE;
				iCmdStep :=iCmdStep +1;
				iCmdOldStep:=iCmdStep;
		3://等待接受
					IF   xBusy THEN
					 		iCmdStep :=iCmdStep +1;
					END_IF
					iCmdOldStep:=iCmdStep;
		4://报警待整理数据
				IF  iOperType<> 14  AND  NOT xBusy AND xDone THEN
						iCmdStep :=iCmdStep +1;
				ELSIF iOperType =14 AND  NOT xQNoRead THEN
				 		iCmdStep :=iCmdStep +1;	
				END_IF
				iCmdOldStep:=iCmdStep;
		5://处理接收的数据
					IF iOperType =1 THEN
							IF FIND(strQBarCode,'$R') <> 0 AND FIND(strQBarCode,'I4') <> 0	THEN					
									 CutStrToSeperator('"',strQBarCode);
									 stParOut.sSrialNumber := CutStrToSeperator('"',strQBarCode);
									 iCmdStep :=iCmdStep +1;;	
							END_IF
					ELSIF iOperType =2 THEN
					 					IF FIND(strQBarCode,'$R') <> 0 		THEN
															IF FIND(strQBarCode,'S') <> 0 THEN
																			_Stemp[1]:=RIGHT(strQBarCode,LEN(strQBarCode)-4);
																			_Stemp[2]:=LEFT(_Stemp[1],FIND(_Stemp[1],'g$R')-1);
																			stParOut.rCurrentTareWight := TO_REAL(_Stemp[2]);
																			iCmdStep :=iCmdStep +1;	
															ELSIF FIND(strQBarCode,'T +') <> 0 THEN	
																			eErrorID:=MT_MCK_ERROR.FLT_ZOverMax;
															ELSIF FIND(strQBarCode,'T -') <> 0 THEN	
																			eErrorID:=MT_MCK_ERROR.FLT_ZOverMax;
															ELSIF FIND(strQBarCode,'T I') <> 0 THEN
															 				eErrorID:=MT_MCK_ERROR.FLT_CannotExecutable;			
															END_IF										
									END_IF						
					ELSIF iOperType =3 THEN
					 						IF FIND(strQBarCode,'$R') <> 0 		THEN
															IF FIND(strQBarCode,'TI S') <> 0 OR FIND(strQBarCode,'TI D') <> 0 THEN
																_Stemp[1]:=RIGHT(strQBarCode,LEN(strQBarCode)-4);
																_Stemp[2]:=LEFT(_Stemp[1],FIND(_Stemp[1],'g$R')-1);
																stParOut.rCurrentTareWight := TO_REAL(_Stemp[2]);
																iCmdStep :=iCmdStep +1;;	
															ELSIF FIND(strQBarCode,'TI +') <> 0 THEN	
																eErrorID:=MT_MCK_ERROR.FLT_ZOverMax;
															ELSIF FIND(strQBarCode,'TI -') <> 0 THEN	
																eErrorID:=MT_MCK_ERROR.FLT_ZOverMax;
															ELSIF FIND(strQBarCode,'TI I') <> 0 THEN
															  eErrorID:=MT_MCK_ERROR.FLT_CannotExecutable;			
															END_IF										
												END_IF		
					ELSIF iOperType =4 THEN									
										IF FIND(strQBarCode,'$R') <> 0 AND FIND(strQBarCode,'TA') <> 0	THEN
											 _Stemp[1]:=RIGHT(strQBarCode,LEN(strQBarCode)-5);
											 _Stemp[2]:=LEFT(_Stemp[1],FIND(_Stemp[1],'g$R')-1);
											 stParOut.rCurrentTareWight := TO_REAL(_Stemp[2]);
											 iCmdStep :=iCmdStep +1;;	
										END_IF		
					ELSIF	iOperType =5 THEN		
										IF FIND(strQBarCode,'$R') <> 0 AND FIND(strQBarCode,'TAC') <> 0	THEN
											 stParOut.rCurrentTareWight:=0;
											 iCmdStep :=iCmdStep +1;;	
										 ELSIF FIND(strQBarCode,'EL') <>0 THEN
											 eErrorID:=MT_MCK_ERROR.FLT_LogicaL;//逻辑错误
										 ELSIF FIND(strQBarCode,'ES') <>0 THEN
											 eErrorID:=MT_MCK_ERROR.FLT_Syntax;//语法错误
										 ELSIF FIND(strQBarCode,'I') <>0 THEN
											 eErrorID:=MT_MCK_ERROR.FLT_CommandCantSend;//指令条件不满足,无法发送	
										 ELSIF FIND(strQBarCode,'L') <>0 THEN
											 eErrorID:=MT_MCK_ERROR.FLT_PARA;//参数错误		
										 ELSIF FIND(strQBarCode,'TAC I') <>0 THEN
											 eErrorID:=MT_MCK_ERROR.FLT_CommandCantSend;
										 END_IF																	
					ELSIF  	iOperType =6 THEN													
											IF FIND(strQBarCode,'Z A') <> 0 THEN
													stParOut.rCurrentTareWight :=0;
													stParOut.rCurrentWeight :=0;
													iCmdStep :=iCmdStep +1;;	
											ELSIF FIND(strQBarCode,'Z +') <> 0 THEN
												eErrorID:=MT_MCK_ERROR.FLT_ZOverMax;							
											ELSIF FIND(strQBarCode,'Z -') <> 0 THEN
												eErrorID:=MT_MCK_ERROR.FLT_ZOverMin;				
											ELSIF FIND(strQBarCode,'Z I') <> 0 THEN
												eErrorID:=MT_MCK_ERROR.FLT_CannotExecutable;					
											END_IF			
				ELSIF  	iOperType =7 THEN													
											IF FIND(strQBarCode,'$R') <> 0 	THEN
														 IF FIND(strQBarCode,'ZI') <> 0 AND (FIND(strQBarCode,'S') <> 0 OR FIND(strQBarCode,'D') <> 0) THEN
															 stParOut.rCurrentTareWight :=0;
															 stParOut.rCurrentWeight :=0;
															 iCmdStep :=iCmdStep +1;;	
															ELSIF FIND(strQBarCode,'Z +') <> 0 THEN
																	 eErrorID:=MT_MCK_ERROR.FLT_ZOverMax;							
															 ELSIF FIND(strQBarCode,'Z -') <> 0 THEN
																	 eErrorID:=MT_MCK_ERROR.FLT_ZOverMin;				
																ELSIF FIND(strQBarCode,'Z I') <> 0 THEN
																	 eErrorID:=MT_MCK_ERROR.FLT_ZI;		
																ELSIF	 FIND(strQBarCode,'ZI I') <> 0 THEN
																 	 eErrorID:=MT_MCK_ERROR.FLT_CannotExecutable;
																END_IF
													END_IF
					ELSIF  	iOperType =8 THEN												
											IF FIND(strQBarCode,'$R') <> 0 AND FIND(strQBarCode,'S') <>0		THEN
														IF FIND(strQBarCode,'mg') <> 0 THEN
															_Stemp[1]:=RIGHT(strQBarCode,LEN(strQBarCode)-5);
															_Stemp[2]:=LEFT(_Stemp[1],FIND(_Stemp[1],'g$R')-1);
															stParOut.rCurrentWeight := TO_REAL(_Stemp[2]);
															stParOut.sWeightUnit:='mg';
															iCmdStep :=iCmdStep +1;;	
														ELSE 
															IF FIND(strQBarCode,'g') <> 0 THEN
																_Stemp[1]:=RIGHT(strQBarCode,LEN(strQBarCode)-5);
																_Stemp[2]:=LEFT(_Stemp[1],FIND(_Stemp[1],'g$R')-1);
																stParOut.rCurrentWeight := TO_REAL(_Stemp[2]);
																stParOut.sWeightUnit:='mg';		
																iCmdStep :=iCmdStep +1;;			
															END_IF				
														END_IF
											ELSIF FIND(strQBarCode,'EL') <>0 THEN
														eErrorID:=MT_MCK_ERROR.FLT_LogicaL;//逻辑错误
											ELSIF FIND(strQBarCode,'ES') <>0 THEN
														eErrorID:=MT_MCK_ERROR.FLT_Syntax;//语法错误		
										ELSIF FIND(strQBarCode,'I') <>0 THEN
														eErrorID:=MT_MCK_ERROR.FLT_CommandCantSend;//指令条件不满足,无法发送		
										ELSIF FIND(strQBarCode,'L') <>0 THEN
														eErrorID:=MT_MCK_ERROR.FLT_PARA;//参数错误	
										ELSIF FIND(strQBarCode,'S I') <>0 THEN
											 eErrorID:=MT_MCK_ERROR.FLT_CannotExecutable;
										END_IF			
					ELSIF  	iOperType =9 THEN							
										IF FIND(strQBarCode,'$R') <> 0 AND FIND(strQBarCode,'S') <>0 THEN
													 IF FIND(strQBarCode,'g') <> 0 THEN
														 _Stemp[1]:=RIGHT(strQBarCode,LEN(strQBarCode)-5);
														 _Stemp[2]:=LEFT(_Stemp[1],FIND(_Stemp[1],'g$R')-1);
														 stParOut.rCurrentWeight := TO_REAL(_Stemp[2]);
														 stParOut.sWeightUnit:='mg';	
															iCmdStep :=iCmdStep +1;;				
													 ELSE 
														 IF FIND(strQBarCode,'g') <> 0 THEN
															 _Stemp[1]:=RIGHT(strQBarCode,LEN(strQBarCode)-5);
															 _Stemp[2]:=LEFT(_Stemp[1],FIND(_Stemp[1],'g$R')-1);
															 stParOut.rCurrentWeight := TO_REAL(_Stemp[2]);
															 stParOut.sWeightUnit:='mg';		
																iCmdStep :=iCmdStep +1;;			
														 END_IF				
													 END_IF
													 IF stParOut.rCurrentWeight>stParOut.rWeightMax THEN
														 stParOut.rWeightMax:=stParOut.rCurrentWeight;
													 END_IF
													 IF stParOut.rCurrentWeight<stParOut.rWeightMin THEN
														 stParOut.rWeightMin:=stParOut.rCurrentWeight;
													 END_IF	
													
										ELSIF FIND(strQBarCode,'EL') <>0 THEN
													 eErrorID:=MT_MCK_ERROR.FLT_LogicaL;//逻辑错误
													
										ELSIF FIND(strQBarCode,'ES') <>0 THEN
													 eErrorID:=MT_MCK_ERROR.FLT_Syntax;//语法错误
																
										 ELSIF FIND(strQBarCode,'I') <>0 THEN
													 eErrorID:=MT_MCK_ERROR.FLT_CommandCantSend;//指令条件不满足,无法发送
																	
										ELSIF FIND(strQBarCode,'L') <>0 THEN
													 eErrorID:=MT_MCK_ERROR.FLT_PARA;//参数错误
										ELSIF FIND(strQBarCode,'SI I') <>0 THEN
											 eErrorID:=MT_MCK_ERROR.FLT_CannotExecutable;//无法执行		
										END_IF		
				ELSIF  	iOperType =10 THEN										
												IF FIND(strQBarCode,'$R') <> 0 AND FIND(strQBarCode,'S') <>0				THEN
													 IF FIND(strQBarCode,'g') <> 0 THEN
														 _Stemp[1]:=RIGHT(strQBarCode,LEN(strQBarCode)-5);
														 _Stemp[2]:=LEFT(_Stemp[1],FIND(_Stemp[1],'g$R')-1);
														 stParOut.rCurrentWeight := TO_REAL(_Stemp[2]);
														 stParOut.sWeightUnit:='mg';
														 iCmdStep :=iCmdStep +1;;	
													 ELSE 
														 IF FIND(strQBarCode,'g') <> 0 THEN
															 _Stemp[1]:=RIGHT(strQBarCode,LEN(strQBarCode)-5);
															 _Stemp[2]:=LEFT(_Stemp[1],FIND(_Stemp[1],'g$R')-1);
															 stParOut.rCurrentWeight := TO_REAL(_Stemp[2]);
															 stParOut.sWeightUnit:='mg';	
																iCmdStep :=iCmdStep +1;;				
														 END_IF				
													 END_IF
										 ELSIF FIND(strQBarCode,'EL') <>0 THEN
											 eErrorID:=MT_MCK_ERROR.FLT_LogicaL;//逻辑错误
										 ELSIF FIND(strQBarCode,'ES') <>0 THEN
											 eErrorID:=MT_MCK_ERROR.FLT_Syntax;//语法错误				
										 ELSIF FIND(strQBarCode,'I') <>0 THEN
											 eErrorID:=MT_MCK_ERROR.FLT_CommandCantSend;//指令条件不满足,无法发送 			
										 ELSIF FIND(strQBarCode,'L') <>0 THEN
											 eErrorID:=MT_MCK_ERROR.FLT_PARA;//参数错误
										 ELSIF FIND(strQBarCode,'SIR I') <>0 THEN
											 eErrorID:=MT_MCK_ERROR.FLT_CannotExecutable;//无法执行
										END_IF
				ELSIF  	iOperType =11 THEN										 
									IF FIND(strQBarCode,'$R') <> 0 AND FIND(strQBarCode,'S') <> 0		THEN
												 _Stemp[1]:=RIGHT(strQBarCode,LEN(strQBarCode)-4);
											_Stemp[2]:=LEFT(_Stemp[1],FIND(_Stemp[1],'g$R')-1);
											stParOut.rCurrentWeight := TO_REAL(_Stemp[2]);
											iCmdStep :=iCmdStep +1;;	
									END_IF														 
				ELSIF  	iOperType =12 THEN						
					 				IF FIND(strQBarCode,'$R') <> 0 AND FIND(strQBarCode,'I4') <> 0	THEN
										CutStrToSeperator('"',strQBarCode);
										stParOut.sSrialNumber := CutStrToSeperator('"',strQBarCode);
										iCmdStep :=iCmdStep +1;	
									END_IF
				ELSIF  	iOperType =13 THEN			
								IF FIND(strQBarCode,'$R') <> 0 AND FIND(strQBarCode,'I4') <> 0	THEN
												iCmdStep :=iCmdStep +1;	
								ELSE			
								 					iCmdStep :=2;	
								END_IF
				ELSIF   iOperType =14 THEN	
							  IF FIND(strQBarCode,'$R') <> 0 AND FIND(strQBarCode,'S S') <> 0	THEN
									//稳态
								 				IF    FIND(strQBarCode,'g')<>0 THEN
												   // stParOut.rRepeatWeight:=strQBarCode;
													//	stParOut.rStableWeight:=strQBarCode;
													_Stemp[1]:=RIGHT(strQBarCode,LEN(strQBarCode)-5);
													_Stemp[2]:=LEFT(_Stemp[1],FIND(_Stemp[1],'g$R')-1);
													stParOut.rRepeatWeight:=TO_REAL(_Stemp[2]);
													stParOut.rStableWeight:=stParOut.rRepeatWeight;
													xRepeatReceive:=TRUE;;
												ELSE
												 			eErrorID:=MT_MCK_ERROR.FLT_SIRERROR;
												 END_IF
												iCmdStep :=iCmdStep +1;	
								ELSIF  	FIND(strQBarCode,'$R') <> 0 AND FIND(strQBarCode,'S D')<>0 THEN
								 //非稳态
								 					IF    FIND(strQBarCode,'g')<>0 THEN
																_Stemp[1]:=RIGHT(strQBarCode,LEN(strQBarCode)-5);
																_Stemp[2]:=LEFT(_Stemp[1],FIND(_Stemp[1],'g$R')-1);
																stParOut.rRepeatWeight:=TO_REAL(_Stemp[2]);
													 			xRepeatReceive:=TRUE;
													ELSE
												 			eErrorID:=MT_MCK_ERROR.FLT_SIRERROR;
												 END_IF
												iCmdStep :=iCmdStep +1;	
								ELSIF  FIND(strQBarCode,'S I')<>0 THEN
								 			eErrorID:=MT_MCK_ERROR.FLT_CannotExecutable;//无法执行
								ELSIF  FIND(strQBarCode,'S L')<>0 THEN
								 			eErrorID:=MT_MCK_ERROR.FLT_PARA;//参数错误
								ELSIF  FIND(strQBarCode,'S +')<>0 THEN
								 			eErrorID:=MT_MCK_ERROR.FLT_SIROverMax;
								ELSIF  FIND(strQBarCode,'S -')<>0 THEN
								 			eErrorID:=MT_MCK_ERROR.FLT_SIROverMIN;
								END_IF				
				END_IF
				iCmdOldStep:=iCmdStep;
		6:	
						xQDone:=TRUE;
						xQBusy:=FALSE;	
						iCmdOldStep:=iCmdStep;
						iCmdStep :=0;		
	END_CASE
	
	]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_Error" Id="{6ae3a7d8-f6c1-46d0-975b-532849a6ece3}">
      <Implementation>
        <ST><![CDATA[IF  eErrorID <> 0 THEN
	xQError:=TRUE;
END_IF
//报错内容输出
CASE eErrorID OF 
	MT_MCK_ERROR.FLT_CMD_TIMEOUT:
		stParOut.sErrorID:='FLT_CMD_TIMEOUT';
	MT_MCK_ERROR.FLT_CmdFeedback:
		stParOut.sErrorID:='FLT_CmdFeedback';
	MT_MCK_ERROR.FLT_CommandCantSend:
		stParOut.sErrorID:='FLT_CommandCantSend';
	MT_MCK_ERROR.FLT_CONNECT:
		stParOut.sErrorID:='FLT_CONNECT';
	MT_MCK_ERROR.FLT_LogicaL:
		stParOut.sErrorID:='FLT_LogicaL';
	MT_MCK_ERROR.FLT_Par:
		stParOut.sErrorID:='FLT_Par';
	MT_MCK_ERROR.FLT_PARA:
		stParOut.sErrorID:='FLT_PARA';
	MT_MCK_ERROR.FLT_RDYCMD:
		stParOut.sErrorID:='FLT_RDYCMD';
	MT_MCK_ERROR.FLT_STOP_TIMEOUT:
		stParOut.sErrorID:='FLT_STOP_TIMEOUT';
	MT_MCK_ERROR.FLT_Syntax:
		stParOut.sErrorID:='FLT_Syntax';
	MT_MCK_ERROR.FLT_TOverMax:
		stParOut.sErrorID:='FLT_TOverMax';
	MT_MCK_ERROR.FLT_TOverMin:
		stParOut.sErrorID:='FLT_TOverMin';
	MT_MCK_ERROR.FLT_ZI:
		stParOut.sErrorID:='FLT_ZI';
	MT_MCK_ERROR.FLT_ZOverMax:
		stParOut.sErrorID:='FLT_ZOverMax';
	MT_MCK_ERROR.FLT_ZOverMin:
		stParOut.sErrorID:='FLT_ZOverMin';
	MT_MCK_ERROR.FLT_CannotExecutable:
			stParOut.sErrorID:='FLT_CannotExecutable';	
	MT_MCK_ERROR.No_ERROR:
		stParOut.sErrorID:='No_ERROR';		
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_OP" Id="{f44dc047-20b5-4a09-9234-2a1699eee633}">
      <Implementation>
        <ST><![CDATA[OperR_TRIG[1](CLK:= (xManualMode AND  stDeviceOpe.xReadSerialNum_HMI) OR((xAutoMode OR  xIDeviceRunning) AND stDeviceOpe.xReadSerialNum_Auto) , Q=> );	//获取序列号,I4			
OperR_TRIG[2](CLK:= (xManualMode AND  stDeviceOpe.xShelling_HMI) OR((xAutoMode OR  xIDeviceRunning) AND stDeviceOpe.xShelling_Auto) , Q=> );		//稳态去皮重,T		
OperR_TRIG[3](CLK:= (xManualMode AND  stDeviceOpe.xShellingInstanly_HMI) OR((xAutoMode OR  xIDeviceRunning) AND stDeviceOpe.xShellingInstanly_HMI) , Q=> );	//立即去皮重,TI			
OperR_TRIG[4](CLK:= (xManualMode AND  stDeviceOpe.xSetTare_HMI) OR((xAutoMode OR  xIDeviceRunning) AND stDeviceOpe.xSetTare_Auto) , Q=> );		//预置皮重，TA		
OperR_TRIG[5](CLK:= (xManualMode AND  stDeviceOpe.xlearTare_HMI) OR((xAutoMode OR  xIDeviceRunning) AND stDeviceOpe.xlearTare_Auto) , Q=> );	//清除皮重,TAC			
OperR_TRIG[6](CLK:= (xManualMode AND  stDeviceOpe.xClearZero_HMI) OR((xAutoMode OR  xIDeviceRunning) AND stDeviceOpe.xClearZero_Auto) , Q=> );	//稳态清零,Z	
OperR_TRIG[7](CLK:= (xManualMode AND  stDeviceOpe.xClearZeroInstanly_HMI) OR((xAutoMode OR  xIDeviceRunning) AND stDeviceOpe.xClearZeroInstanly_Auto) , Q=> );	////立即清零,ZI	
OperR_TRIG[8](CLK:= (xManualMode AND  stDeviceOpe.xAcquireWeight_Steady_HMI) OR((xAutoMode OR  xIDeviceRunning) AND stDeviceOpe.xClearZero_Auto) , Q=> );	////单次获取稳态重量,S	
OperR_TRIG[9](CLK:= (xManualMode AND  stDeviceOpe.xAcquireWeight_RealTime_HMI) OR((xAutoMode OR  xIDeviceRunning) AND stDeviceOpe.xAcquireWeight_RealTime_Auto) , Q=> );	////连续获取重量,SI
OperR_TRIG[10](CLK:= (xManualMode AND  stDeviceOpe.xAcquireWeight_Continuous_HMI) OR((xAutoMode OR  xIDeviceRunning) AND stDeviceOpe.xAcquireWeight_Continuous_Auto) , Q=> );	////连续获取重量,SIR	
OperR_TRIG[11](CLK:= (xManualMode AND  stDeviceOpe.xAcquireWeight_Stop_HMI) OR((xAutoMode OR  xIDeviceRunning) AND stDeviceOpe.xAcquireWeight_Stop_Auto) , Q=> );	///中断连续获取重量,SI
OperR_TRIG[12](CLK:= (xManualMode AND  stDeviceOpe.xRestart_HMI) OR((xAutoMode OR  xIDeviceRunning) AND stDeviceOpe.xRestart_Auto) , Q=> );	//重启秤体	
OperR_TRIG[13](CLK:=xIReset , Q=> );	//Cancel	
OperR_TRIG[14](CLK:=( (xManualMode AND  stDeviceOpe.xRepeatRead_Hmi ) OR((xAutoMode OR  xIDeviceRunning) AND stDeviceOpe.xRepeatRead_Auto) )AND iOperType <>14 , Q=> );	//循环读取重量并显示
FOR  i:= 1 TO 20 BY 1 DO
 	IF   OperR_TRIG[i].Q THEN
				iOperType:= i;
				xCmd:=TRUE;
				EXIT;
	END_IF
END_FOR

IF   iOperType =1 THEN
 	strRead := 'I4$R$N';
ELSIF   iOperType =2 THEN
 	strRead := 'T$R$N';
ELSIF   iOperType =3 THEN
 	strRead := 'TI$R$N';
ELSIF   iOperType =4 THEN
 	_sSendData := CONCAT(_sSendData,'TA');
	_sSendData := CONCAT(_sSendData,' ');		
	_sSendData := CONCAT(_sSendData,TO_STRING(rTareSet));
	_sSendData := CONCAT(_sSendData,' ');
	_sSendData := CONCAT(_sSendData,'g');//单位
	_sSendData := CONCAT(_sSendData,'$R$N');//回车换行符			
 	strRead := _sSendData;
ELSIF   iOperType =5 THEN
 	strRead := 'TAC$R$N';
ELSIF   iOperType =6 THEN
 	strRead := 'Z$R$N';
ELSIF   iOperType =7 THEN
 	strRead := 'ZI$R$N';
ELSIF   iOperType =8 THEN
 	strRead := 'S$R$N';
ELSIF   iOperType =9 THEN
 	strRead := 'SI$R$N';
ELSIF   iOperType =10 THEN
 	strRead := 'SIR$R$N';
ELSIF   iOperType =11 THEN
 	strRead := 'SI$R$N';
ELSIF   iOperType =12 THEN
 	strRead := 'R01$R$N';
ELSIF iOperType =13 THEN
 	strRead := '@$R$N';
ELSIF  iOperType =14 THEN
  strRead := 'SIR$R$N';
END_IF

	stDeviceOpe.xReadSerialNum_HMI:=stDeviceOpe.xReadSerialNum_Auto :=FALSE;	//获取序列号,I4
	stDeviceOpe.xShelling_HMI:=stDeviceOpe.xShelling_Auto						:=FALSE;//稳态去皮重,T
	stDeviceOpe.xShellingInstanly_HMI:=stDeviceOpe.xShellingInstanly_Auto	:=FALSE;//立即去皮重,TI	
	stDeviceOpe.xSetTare_HMI:=stDeviceOpe.xSetTare_Auto										:=FALSE;//预置皮重，TA
	stDeviceOpe.xlearTare_HMI:=stDeviceOpe.xlearTare_Auto									:=FALSE;//清除皮重,TAC
	stDeviceOpe.xClearZero_HMI:=stDeviceOpe.xClearZero_Auto								:=FALSE;//稳态清零,Z
	stDeviceOpe.xClearZeroInstanly_HMI:=stDeviceOpe.xClearZeroInstanly_Auto:=FALSE;//立即清零,ZI
	stDeviceOpe.xAcquireWeight_Steady_HMI:=stDeviceOpe.xAcquireWeight_Steady_Auto :=FALSE;//单次获取稳态重量,S
	stDeviceOpe.xAcquireWeight_RealTime_HMI:=stDeviceOpe.xAcquireWeight_RealTime_Auto:=FALSE;//连续获取重量,SI
	stDeviceOpe.xAcquireWeight_Continuous_HMI:=stDeviceOpe.xAcquireWeight_Continuous_Auto:=FALSE;//连续获取重量,SIR
	stDeviceOpe.xAcquireWeight_Stop_HMI:=stDeviceOpe.xAcquireWeight_Stop_Auto		:=FALSE;//中断连续获取重量,SI
	stDeviceOpe.xRestart_HMI:=stDeviceOpe.xRestart_Auto										      :=FALSE;//重启秤体	
	stDeviceOpe.xRepeatRead_Hmi:=stDeviceOpe.xRepeatRead_Auto							      :=FALSE;//重复读取
	//xIReset:=FALSE;
	


]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_Reset" Id="{cae3f52b-6e54-4a2f-9e41-7eee5b7580a7}">
      <Implementation>
        <ST><![CDATA[IF ( xIReset = TRUE )THEN
 		iCmdStep:=0;
  	iStep := 0 ;
		iLoadStep:=0;
  	xQError := FALSE ;
  	xBusy  := FALSE;
		xQBusy  := FALSE;
		xStart  := FALSE;
		eErrorID:=MT_MCK_ERROR.No_ERROR;
		iCmdOldStep:=0;
		xIReset:=FALSE;
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_RW" Id="{665722a9-b5c8-4abb-bc5a-bc44bd92c021}">
      <Implementation>
        <ST><![CDATA[
 
IF ( First = FALSE )THEN
   	TcpIpClient.sRemoteServer := stSysPar.sRemoteHost;
 		TcpIpClient.nRemotePort := stSysPar.nRemotePort;
   	TcpIpClient.pSendData := ADR(ClientSendBuffer);
   	TcpIpClient.pRecvData := ADR(ClientRecvBuffer);
   	First := TRUE ;
ELSE
  	TcpIpClient(iStep :=	eStepCmd );
 	CASE iStep OF
		0: (* wait start *)
		   	IF ( xStart = FALSE )THEN
		       	xDone := FALSE ;
		   	END_IF
		  	IF ( xStart = FALSE ) AND( xDone = FALSE )THEN
		       	xRdyCmd := TRUE  ;
		   	END_IF

		   	IF ( xStart = TRUE ) AND( xRdyCmd = TRUE )THEN
				iStep  :=  10 ;
				xBusy:=TRUE;
			  xRdyCmd := FALSE  ;
			(*ELSE
 			 	xBusy  := FALSE;*)
		   	END_IF

		10: (* creat soket*)
			xStart := FALSE;
			MEMSET(ADR(strLocalQBarCode),0,SIZEOF(strLocalQBarCode));
			MEMSET(ADR(strQBarCode),0,SIZEOF(strQBarCode));
			MEMSET(ADR(ClientRecvBuffer),0,SIZEOF(ClientRecvBuffer));
			eStepCmd := CLIENT_STATE_CONNECT_START ;
		    	iStep := 20 ;

		20: (* socket ok *)
 			 IF( eStepCmd = CLIENT_STATE_IDLE )THEN
		    	 	iStep := 30 ;
			ELSIF( eStepCmd = CLIENT_STATE_ERROR )THEN
				iQErrorNo:=iStep;
		    	 	iStep := 100 ;
	         	END_IF

		30: (* send read *)
   			MEMCPY(ADR(ClientSendBuffer),ADR(strRead),SIZEOF(strRead));
			TcpIpClient.SendLen := LEN(strRead);
			eStepCmd := CLIENT_STATE_SEND_START ;
		    	iStep := 40 ;

		40: (* send ok *)
 			IF( eStepCmd = CLIENT_STATE_IDLE )THEN
		    	 	iStep := 50 ;
			ELSIF( eStepCmd = CLIENT_STATE_ERROR )THEN
				iQErrorNo:=iStep;
		    	 	iStep := 999 ;
	         	END_IF

		50: (* recive read *)
			xQNoRead:=TRUE;
			eStepCmd := CLIENT_STATE_RECIVE_START ;
		    	iStep := 55 ;

   55:
			strLocalQBarCode:='';
			strQBarCode:='';
			Waittime(IN:=TRUE, PT:= t#20ms);
	      	IF(waittime.Q = TRUE )THEN
 							Waittime(IN:= FALSE);
		    	 		iStep := 60 ;
	        END_IF

		60: (* recive end *)
				IF( eStepCmd = CLIENT_STATE_IDLE )THEN
						 MEMCPY(ADR(strLocalQBarCode),ADR(ClientRecvBuffer),TcpIpClient.cbReceived);
						 strQBarCode:=MID(strLocalQBarCode,iICodeLEN,iICodePOS);
						 iStep := 80 ;
			 ELSIF( eStepCmd = CLIENT_STATE_ERROR )THEN
				 		 iQErrorNo:=iStep;
						 iStep := 70;
			 END_IF
		70:
				MEMSET(ADR(strLocalQBarCode),0,SIZEOF(strLocalQBarCode));
				MEMSET(ADR(strQBarCode),0,SIZEOF(strQBarCode));
				iStep := 80;

		80: (* close socket *)
			 IF  strQBarCode<>'' THEN
							 xQNoRead:=FALSE;
			 ELSE
							 xQNoRead:=TRUE;
			 END_IF
			 IF iOperType =14 THEN
					 	iStep := 50 ;
			 ELSE
				 		iStep := 100 ;
			 END_IF
		100: (* close socket *)
					eStepCmd := CLIENT_STATE_CLOSE_START ;
		    	iStep := 110 ;
		110: (* recive end *)
				IF( eStepCmd = CLIENT_STATE_IDLE )THEN
							xBusy  := FALSE;
							xDone := TRUE ;
							iStep := 0 ;
				ELSIF( eStepCmd = CLIENT_STATE_ERROR )THEN
							iStep := 999 ;
							END_IF

		999: (* Done *)
				 xBusy:=FALSE;
				 xQError := TRUE ;
					iStep := 0 ;
	END_CASE
END_IF]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="FB_MKC204C">
      <LineId Id="690" Count="3" />
      <LineId Id="698" Count="0" />
    </LineIds>
    <LineIds Name="FB_MKC204C.ACT_Cmd">
      <LineId Id="6" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="147" Count="1" />
      <LineId Id="146" Count="0" />
      <LineId Id="519" Count="0" />
      <LineId Id="521" Count="0" />
      <LineId Id="524" Count="1" />
      <LineId Id="523" Count="0" />
      <LineId Id="8" Count="2" />
      <LineId Id="78" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="490" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="86" Count="3" />
      <LineId Id="515" Count="0" />
      <LineId Id="92" Count="3" />
      <LineId Id="516" Count="0" />
      <LineId Id="100" Count="1" />
      <LineId Id="133" Count="0" />
      <LineId Id="585" Count="1" />
      <LineId Id="104" Count="0" />
      <LineId Id="517" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="472" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="203" Count="3" />
      <LineId Id="473" Count="0" />
      <LineId Id="208" Count="1" />
      <LineId Id="211" Count="1" />
      <LineId Id="537" Count="1" />
      <LineId Id="214" Count="1" />
      <LineId Id="226" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="239" Count="3" />
      <LineId Id="474" Count="0" />
      <LineId Id="244" Count="1" />
      <LineId Id="247" Count="1" />
      <LineId Id="539" Count="1" />
      <LineId Id="250" Count="0" />
      <LineId Id="252" Count="0" />
      <LineId Id="177" Count="0" />
      <LineId Id="261" Count="0" />
      <LineId Id="263" Count="2" />
      <LineId Id="475" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="268" Count="0" />
      <LineId Id="270" Count="0" />
      <LineId Id="272" Count="0" />
      <LineId Id="476" Count="0" />
      <LineId Id="274" Count="1" />
      <LineId Id="277" Count="1" />
      <LineId Id="287" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="283" Count="1" />
      <LineId Id="541" Count="1" />
      <LineId Id="286" Count="0" />
      <LineId Id="221" Count="0" />
      <LineId Id="288" Count="2" />
      <LineId Id="478" Count="0" />
      <LineId Id="297" Count="5" />
      <LineId Id="222" Count="0" />
      <LineId Id="305" Count="0" />
      <LineId Id="315" Count="0" />
      <LineId Id="317" Count="2" />
      <LineId Id="479" Count="0" />
      <LineId Id="326" Count="5" />
      <LineId Id="527" Count="1" />
      <LineId Id="304" Count="0" />
      <LineId Id="332" Count="1" />
      <LineId Id="336" Count="0" />
      <LineId Id="338" Count="4" />
      <LineId Id="480" Count="0" />
      <LineId Id="343" Count="5" />
      <LineId Id="481" Count="0" />
      <LineId Id="349" Count="1" />
      <LineId Id="352" Count="1" />
      <LineId Id="355" Count="1" />
      <LineId Id="358" Count="1" />
      <LineId Id="361" Count="1" />
      <LineId Id="544" Count="1" />
      <LineId Id="334" Count="1" />
      <LineId Id="364" Count="0" />
      <LineId Id="366" Count="4" />
      <LineId Id="482" Count="0" />
      <LineId Id="371" Count="5" />
      <LineId Id="483" Count="0" />
      <LineId Id="377" Count="19" />
      <LineId Id="547" Count="1" />
      <LineId Id="223" Count="0" />
      <LineId Id="399" Count="1" />
      <LineId Id="402" Count="4" />
      <LineId Id="484" Count="0" />
      <LineId Id="407" Count="5" />
      <LineId Id="485" Count="0" />
      <LineId Id="413" Count="1" />
      <LineId Id="416" Count="1" />
      <LineId Id="419" Count="1" />
      <LineId Id="422" Count="1" />
      <LineId Id="425" Count="2" />
      <LineId Id="549" Count="0" />
      <LineId Id="428" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="459" Count="0" />
      <LineId Id="461" Count="2" />
      <LineId Id="486" Count="0" />
      <LineId Id="465" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="532" Count="3" />
      <LineId Id="471" Count="0" />
      <LineId Id="508" Count="0" />
      <LineId Id="510" Count="1" />
      <LineId Id="513" Count="1" />
      <LineId Id="512" Count="0" />
      <LineId Id="550" Count="0" />
      <LineId Id="552" Count="0" />
      <LineId Id="561" Count="0" />
      <LineId Id="556" Count="0" />
      <LineId Id="559" Count="0" />
      <LineId Id="580" Count="0" />
      <LineId Id="588" Count="1" />
      <LineId Id="587" Count="0" />
      <LineId Id="590" Count="0" />
      <LineId Id="582" Count="0" />
      <LineId Id="558" Count="0" />
      <LineId Id="571" Count="1" />
      <LineId Id="553" Count="1" />
      <LineId Id="562" Count="0" />
      <LineId Id="574" Count="0" />
      <LineId Id="591" Count="2" />
      <LineId Id="581" Count="0" />
      <LineId Id="576" Count="2" />
      <LineId Id="555" Count="0" />
      <LineId Id="563" Count="0" />
      <LineId Id="565" Count="1" />
      <LineId Id="564" Count="0" />
      <LineId Id="567" Count="3" />
      <LineId Id="551" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="518" Count="0" />
      <LineId Id="488" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="520" Count="0" />
      <LineId Id="135" Count="0" />
    </LineIds>
    <LineIds Name="FB_MKC204C.ACT_Error">
      <LineId Id="1" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="7" Count="31" />
      <LineId Id="41" Count="1" />
      <LineId Id="39" Count="1" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_MKC204C.ACT_OP">
      <LineId Id="2" Count="0" />
      <LineId Id="54" Count="8" />
      <LineId Id="66" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="182" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="169" Count="4" />
      <LineId Id="168" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="149" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="155" Count="7" />
      <LineId Id="175" Count="0" />
      <LineId Id="177" Count="0" />
      <LineId Id="185" Count="1" />
      <LineId Id="134" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="90" Count="10" />
      <LineId Id="71" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="178" Count="1" />
      <LineId Id="73" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_MKC204C.ACT_Reset">
      <LineId Id="2" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="5" Count="2" />
      <LineId Id="11" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_MKC204C.ACT_RW">
      <LineId Id="2" Count="77" />
      <LineId Id="81" Count="4" />
      <LineId Id="87" Count="5" />
      <LineId Id="121" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="114" Count="2" />
      <LineId Id="96" Count="16" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
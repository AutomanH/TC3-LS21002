<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="S07_BoxCarrying" Id="{6b37cfc4-ad6b-4e75-b61c-ced2d9234ad8}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM S07_BoxCarrying
VAR
	//工站
	station					: REFERENCE TO FB_Station:=fbstation[7];
	//气缸

	//伺服
	fbNGStepMotor	 :REFERENCE TO FB_Axis:=fbAxis[19];	//	NG流道旋转部进
	//大寰夹爪
	fbClamp			 	:REFERENCE TO FB_RGI_14_Modbus:=fbRGI_14_Modbus[1];
	//图灵机械手
	fbRobot   :REFERENCE TO FB_TURINContorl:=fbTURINContorl[1];
	//延时
	arTonDelay :ARRAY[1..20] OF TON;
	//返回值
	UdiReturnValue :ARRAY[1..20] OF UDINT;
	//本地过程数据
	arProcessDataStation : ARRAY [1..3] OF DUT_MainlineFixture;
	i: INT;
	// 临时变量
	_FirstCycle:ARRAY[1..10] OF BOOL;
	// 循环计数
	bCounter: BYTE;
	// 结束循环
	bEndCounter: BYTE;
	//过程记录
	tsModuleProcess:ARRAY[1..gc_ModuleProNo] OF DUT_Process;
	xClearModuleProcessDone:BOOL;
	bClearProcessStep	:BYTE;
	//机械手循环次数
	bRobCounter: BYTE;
	//放料到卡片上
	xPutBoxInCardPosDone :BOOL;
	//buffer位置是否有产品
	xBufferPosCheckSensor: BOOL;
	//NG流道传感器
	xNGPosCheckSensor :ARRAY[1..3] OF BOOL;
	//允许机械手放料到NG流道
	xNGPutBoxPermit:BOOL;
//	//入料线体深孔板检测
//	xBeltBoxCheckSensor:ARRAY[1..2] OF BOOL;
	//NG流道步骤
	iNGStep: INT;
	// //报警屏蔽
	_AlarmDisable: BOOL;
	//取上来的孔板放置位置
	iPutPartPosChoose:WORD;
	iPickPartPosChoose:WORD;
//	//已经放完的孔板位置
//	xPutBeltLineCompleted:ARRAY[1..2] OF BOOL;
	//主流线传感器
	xMainLineSensorReached:ARRAY[1..2] OF BOOL;

	// 临时
	bRobotStep: BYTE;
	// 临时
	xRobotStartTryRun: BOOL;
	test: BOOL;
	EstopR_TRIG: R_TRIG;
	MachineInitR_TRIG: R_TRIG;
	_FirstPosChoose: WORD;
	_SecondPosChoose: WORD;
	// 皮带线控制Done信号
	xBeltLineControl: BOOL;
	// NG流道允许运行
	xNGLinePremit: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[A_Input();
Alarm();
Delay();
FlowAuto();
FlowInit();
General();
ILC();
TipAuto();
TipManual();
Z_Output();]]></ST>
    </Implementation>
    <Action Name="A_Input" Id="{f1dcf18d-ccc6-45af-824d-0ee13206a5a0}">
      <Implementation>
        <ST><![CDATA[//传感器
xBufferPosCheckSensor:=IxBufferCheckSensor1;(*缓冲工位传感器*)
xNGPosCheckSensor[1]:=IxS07CheckSensor3;	(*NG流道传感器，机械手放料检测*)
xNGPosCheckSensor[2]:=IxS07CheckSensor2;	(*NG流道传感器,中间传感器**)
xNGPosCheckSensor[3]:=IxS07CheckSensor1; 	(*NG流道传感器，满料传感器*)


xMainLineSensorReached[1]:=IxLineEndSensor1Reached	;//	主流线尾端¶到位检测传感器1
xMainLineSensorReached[2]:=IxLineEndSensor2Reached	;//	主流线尾端¶到位检测传感器2

////入料线体深孔板检测
//xBeltBoxCheckSensor[1]:=IxBeltEntryBoxCheckSensor1	;
//xBeltBoxCheckSensor[2]:=IxBeltEntryBoxCheckSensor2	;
//
 
  ]]></ST>
      </Implementation>
    </Action>
    <Action Name="Alarm" Id="{47f9cde6-7808-4f5e-8ff7-24a7395347bd}">
      <Implementation>
        <ST><![CDATA[//
station.adwAlarm[1].00:=station.xInitTimeout;	  			//S07BoxCarrying 初始化超时

(*station.adwAlarm[1].01:=TRUE;*)//NG流道满料请处理	  	
(*station.adwAlarm[1].02:=TRUE;*)//NG流道步进运动超时 ，请检查传感器是否正常
//station.adwAlarm[1].03	:=	fbRobot.eErrID<>0	;//	S07孔板搬运工位机械手报错
station.adwAlarm[1].04	:=	fbClamp.xError	;//	S07孔板搬运工位夹爪报错
//station.adwAlarm[1].05	:=	fbNGStepMotor.xError	;//	S07孔板搬运工位NG流道伺服报错
//station.adwAlarm[1].06	:=	fbNGStepMotor.xNotPowerOn	;//	S07孔板搬运工位NG流道伺服未使能
//station.adwAlarm[1].07	:=	fbNGStepMotor.xMoveTimeout	;//	S07孔板搬运工位NG流道伺服移动超时
IF 	station.xRunning AND	xMainLineSensorReached[2]  THEN 	
	arTonDelay[03](IN:= TRUE   , PT:=T#1S , Q=> , ET=> );
	IF  arTonDelay[03].Q THEN 
				station.adwAlarm[1].08	:=	TRUE 	;//	主流线结尾处检测到深孔板，请检查
	END_IF
ELSE
 arTonDelay[03](IN:= FALSE);
END_IF
//station.adwAlarm[1].09	:=	true	;//	S07孔板搬运工位卡片1位置不可重复放置,请检查
//station.adwAlarm[1].10	:=	true;//	S07孔板搬运工位卡片2位置不可重复放置,请检查
//station.adwAlarm[1].11	:=	true	;//	S07孔板搬运工位Buffer位置不可重复放置,请检查
//station.adwAlarm[1].12	:=	true	;//	S07孔板搬运工位NG位置不可重复放置,请检查]]></ST>
      </Implementation>
    </Action>
    <Action Name="Delay" Id="{2db4a02f-a342-4718-bc45-d3fd6620ccc0}">
      <Implementation>
        <ST><![CDATA[arTonDelay[01](IN:= , PT:=T#0.1S , Q=> , ET=> );
(*arTonDelay[02](IN:=  , PT:=T#1S , Q=> , ET=> );*)//NG流道使用
arTonDelay[03](IN:=   , PT:=T#1S , Q=> , ET=> );//尾端传感器报警用
arTonDelay[04](IN:= , PT:=T#0.1S , Q=> , ET=> );
arTonDelay[05](IN:= , PT:=T#0.1S , Q=> , ET=> );
arTonDelay[06](IN:= , PT:=T#0.1S , Q=> , ET=> );
arTonDelay[07](IN:= , PT:=T#0.1S , Q=> , ET=> );
arTonDelay[08](IN:= , PT:=T#0.1S , Q=> , ET=> );
arTonDelay[09](IN:= , PT:=T#0.1S , Q=> , ET=> );
arTonDelay[10](IN:= NOT fbNGStepMotor.xbusy  , PT:=T#0.1S , Q=> , ET=> );//TipAuto使用
















]]></ST>
      </Implementation>
    </Action>
    <Action Name="FlowAuto" Id="{8df4f476-270d-449a-8a63-072e63270891}">
      <Implementation>
        <ST><![CDATA[//-----------------------------------------初始化是否完成判断----------------------------------------------
IF NOT station.xInitDone 
THEN
 	station.iStepAuto:=0;
 	station.xDone:=FALSE;
ELSIF station.xRunning  OR ( tsModuleProcess[bRobCounter+1].xProcessStarted AND NOT   tsModuleProcess[bRobCounter+1].xProcessCompleted) OR
 												 ( tsModuleProcess[bRobCounter+3].xProcessStarted AND NOT   tsModuleProcess[bRobCounter+3].xProcessCompleted)
THEN
//-----------------------------------------动作步骤--------------------------------------------------------
CASE station.iStepAuto OF	  
	0: //----Home Step，等待启动----
		IF station.xDisabled 
			AND station.xCanRun 
			AND NOT fbMachine[1].xStopped 
			AND NOT station.xSingleRunning 
		THEN
			station.xDone:=TRUE;
			xS07MainlineRunPermit:=TRUE;
		END_IF
		
		IF  station.xSingleRunning 
			OR station.xCanRun 
			//AND NOT station.xDone 
			AND NOT station.xDisabled 
			AND NOT fbMachine[1].xStopped
		THEN
			station.xCycleEnable:=TRUE;
			//station.xDone:= FALSE;  
			station.iStepAuto:= 5;
		END_IF
    5: //复位数据
			IF  station.xSingleRunning THEN
				 FOR i:=1 TO gc_ModuleProNo BY 1 DO
						 MEMSET(ADR(tsModuleProcess[i]),0,SIZEOF(tsModuleProcess[i]));
				 END_FOR
			END_IF
			station.iStepAuto:=10;
	10: //判断产品是否到该工位
		IF  fbMachine[1].xTryRun THEN //OR station.xSingleRunning THEN
			station.iStepAuto:= 20;
		ELSE
			IF   	 NOT  arMainlineFixtureData[arCurFixtureNumStation[17]].xMaterialOnOff AND
					 NOT  arMainlineFixtureData[arCurFixtureNumStation[18]].xMaterialOnOff AND  NOT    xMainLineSensorReached[1] THEN
							station.iStepAuto:= 999;
					//		xBeltLineControl:=FALSE;
							xS07MainlineRunPermit:=TRUE;		
			ELSIF		( arMainlineFixtureData[arCurFixtureNumStation[17]].xMaterialOnOff AND    
						arMainlineFixtureData[arCurFixtureNumStation[18]].xMaterialOnOff  )AND  xMainLineSensorReached[1]   THEN
						//	xBeltLineControl:=TRUE;
							station.iStepAuto:= 20;
			END_IF
		END_IF
	20:////Restore_after_Estop_Process1 上载数据流程
			IF  station.xSingleRunning OR fbMachine[1].xTryRun THEN
					station.iStepAuto :=40; 
			ELSIF tsModuleProcess[1].xProcessNotStarted AND NOT  tsModuleProcess[1].xProcessStarted THEN
					station.iStepAuto :=30; (*process not started*)
			ELSIF  tsModuleProcess[1].xProcessStarted AND NOT  tsModuleProcess[1].xProcessCompleted THEN
				 station.iStepAuto := 30;(*process started*)
			ELSIF  tsModuleProcess[1].xProcessCompleted AND NOT tsModuleProcess[1].xQDataCompleted  THEN
					station.iStepAuto :=40 ;(*process completed*)
			ELSIF tsModuleProcess[1].xQDataCompleted THEN
					station.iStepAuto :=40;(*Qdata completed *)
			ELSE
					station.iStepAuto :=21; 
			END_IF	
	21://
				tsModuleProcess[1].xProcessNotStarted:=TRUE;
				station.iStepAuto:= 30;
	30://上载产品数据
				tsModuleProcess[1].xProcessStarted	:=TRUE;
				MEMCPY(ADR(arProcessDataStation[1]),ADR(arMainlineFixtureData[arCurFixtureNumStation[17]]),SIZEOF(arMainlineFixtureData[arCurFixtureNumStation[17]]));
				MEMCPY(ADR(arProcessDataStation[2]),ADR(arMainlineFixtureData[arCurFixtureNumStation[18]]),SIZEOF(arMainlineFixtureData[arCurFixtureNumStation[18]]));
				tsModuleProcess[1].xProcessCompleted	:=TRUE;
				station.iStepAuto:= 40;		
	/////产品流程开始	
	40:	//机械手循环开始  总数为2  最多3
			 	bRobCounter :=1;
				station.iStepAuto:= 50;
	50:////Restore_after_Estop_Process2 /Process3机械手第1/2次取料流程
			IF  station.xSingleRunning OR fbMachine[1].xTryRun THEN
					station.iStepAuto :=60; 
			ELSIF tsModuleProcess[bRobCounter+1].xProcessNotStarted AND NOT  tsModuleProcess[bRobCounter+1].xProcessStarted THEN
					station.iStepAuto :=60; (*process not started*)
			ELSIF  tsModuleProcess[bRobCounter+1].xProcessStarted AND NOT  tsModuleProcess[bRobCounter+1].xProcessCompleted THEN
				 station.iStepAuto := 60;(*process started*)
			ELSIF  tsModuleProcess[bRobCounter+1].xProcessCompleted AND NOT tsModuleProcess[bRobCounter+1].xQDataCompleted  THEN
					station.iStepAuto :=100 ;(*process completed*)
			ELSIF tsModuleProcess[bRobCounter+1].xQDataCompleted THEN
					station.iStepAuto :=100;(*Qdata completed *)
			ELSE
					station.iStepAuto :=60; 
			END_IF
	60://机械手选择取料程序	
			tsModuleProcess[bRobCounter+1].xProcessNotStarted:=TRUE;
			stToRobot1.iMoveMode := CmdRobot1.Cmd_TakePart ;//切换程序
			IF    stFromRobot1.xStepRunning  THEN
			 			stToRobot1.iMoveMode := CmdRobot1.noCmd ;
			 			station.iStepAuto :=70; 
			END_IF
	70://取料子程序运行
			stToRobot1.xStepRunPermit := TRUE ;
			IF stFromRobot1.xStepRunDone THEN
					stToRobot1.xStepRunPermit := FALSE ;
					station.iStepAuto :=80; 
	 		END_IF
	80:	//机械手允许去取料位
				IF  bRobCounter =1 THEN
				 	stToRobot1.xPickPos1Premit :=TRUE;
						IF stFromRobot1.xPickPos1Reached THEN 
							 station.iStepAuto :=85;
						END_IF
				ELSIF bRobCounter =2 THEN
					 stToRobot1.xPickPos2Premit :=TRUE;
					 	IF stFromRobot1.xPickPos2Reached THEN 
							 station.iStepAuto :=85;
						END_IF
				END_IF	
	85://清除信号
				 stToRobot1.xPickPos1Premit := FALSE ;
				 stToRobot1.xPickPos2Premit := FALSE ;	
				  station.iStepAuto :=90;
	90://电动夹爪夹紧
		 tsModuleProcess[bRobCounter+1].xProcessStarted:=TRUE;
		 IF  fbmachine[1].xTryRun THEN 
			 station.iStepAuto :=95;
		 ELSE
			fbClamp.stOper.aClampControl[1]:=TRUE ;
			IF fbClamp.xDone  OR ( fbClamp.xGripClampEmpty AND  fbmachine[1].xTryRun )   THEN
					fbClamp.xExecute :=FALSE ;
					station.iStepAuto :=95;
			END_IF
		END_IF
	95://夹取完成,机械手回中转位
				stToRobot1.xClampPartDone:=TRUE;
			IF   stFromRobot1.xPickTransferPosReached THEN
						 tsModuleProcess[bRobCounter+1].xProcessCompleted:=TRUE;
						station.iStepAuto :=96;
			END_IF
			
	96://复位夹取完成信号
					IF bRobCounter =2 THEN
								xS07MainlineRunPermit:=TRUE;
					END_IF
					stToRobot1.xClampPartDone:=FALSE;
					station.iStepAuto :=97;
	97://等皮带线前进完成后再做放料判断
			IF 	S10_BeltCarrying.station.xDone  THEN
			 	station.iStepAuto :=100;
			END_IF
	100:
			////Restore_after_Estop_Process4/Process5 机械手第1/2次放料流程
			IF  station.xSingleRunning OR fbMachine[1].xTryRun THEN
					station.iStepAuto :=110; 
			ELSIF tsModuleProcess[bRobCounter+3].xProcessNotStarted AND NOT  tsModuleProcess[bRobCounter+3].xProcessStarted THEN
					station.iStepAuto :=110; (*process not started*)
			ELSIF  tsModuleProcess[bRobCounter+3].xProcessStarted AND NOT  tsModuleProcess[bRobCounter+3].xProcessCompleted THEN
				 station.iStepAuto := 110;(*process started*)
			ELSIF  tsModuleProcess[bRobCounter+3].xProcessCompleted AND NOT tsModuleProcess[bRobCounter+3].xQDataCompleted  THEN
					station.iStepAuto :=170 ;(*process completed*)
			ELSIF tsModuleProcess[bRobCounter+3].xQDataCompleted THEN
					station.iStepAuto :=170;(*Qdata completed *)
			ELSE
					station.iStepAuto :=110; 
			END_IF	
	110://判断该去哪个位置放料
			tsModuleProcess[bRobCounter+3].xProcessNotStarted:=TRUE;
			IF  bRobCounter =1 THEN
			 		IF   arProcessDataStation[1].stProduct.xALL_OK  THEN
					 		IF     NOT S10_BeltCarrying.xBoxSensorReached[1]  AND  NOT S10_BeltCarrying.xBoxSensorReached[2] THEN
					 				iPutPartPosChoose :=stPutPartPosChoose.CardPositon_1;(*卡片1位置 *)
							ELSIF     S10_BeltCarrying.xBoxSensorReached[1]  AND  NOT S10_BeltCarrying.xBoxSensorReached[2] THEN
							 		iPutPartPosChoose :=stPutPartPosChoose.CardPostion_2;(*卡片2位置 *)
							END_IF
					ELSIF  arProcessDataStation[1].stProduct.xPart_NG  THEN
					 		iPutPartPosChoose :=stPutPartPosChoose.NGPositon;(*NG位置*)
					END_IF
					_FirstPosChoose:=iPutPartPosChoose;//记录第一次放置的位置
			ELSIF  bRobCounter =2 THEN
			 		IF   arProcessDataStation[2].stProduct.xALL_OK  THEN 
					 		IF    NOT S10_BeltCarrying.xBoxSensorReached[1]  AND  NOT S10_BeltCarrying.xBoxSensorReached[2] THEN
					 					iPutPartPosChoose :=stPutPartPosChoose.CardPositon_1;(*卡片1位置 *)
							ELSIF  S10_BeltCarrying.xBoxSensorReached[1]   AND  NOT S10_BeltCarrying.xBoxSensorReached[2]  THEN
							 			iPutPartPosChoose :=stPutPartPosChoose.CardPostion_2;(*卡片2位置 *)
							ELSIF	  S10_BeltCarrying.xBoxSensorReached[1]  AND  S10_BeltCarrying.xBoxSensorReached[2] THEN 
							 				iPutPartPosChoose :=stPutPartPosChoose.BufferPostion;(*buffer位置 *)
							END_IF
					ELSIF  arProcessDataStation[2].stProduct.xPart_NG  THEN
					 		iPutPartPosChoose :=stPutPartPosChoose.NGPositon;(*NG位置*)
					END_IF
							_SecondPosChoose:=iPutPartPosChoose;//记录第二次放置位置
			 END_IF
			station.iStepAuto :=111;	
		111://如果第二次和第一次放置的位置相同，请检查程序
					IF		bRobCounter =2 THEN
					 				IF _SecondPosChoose=_FirstPosChoose AND 
										_FirstPosChoose<>stPutPartPosChoose.NGPositon	AND 
										_SecondPosChoose<>stPutPartPosChoose.NGPositon THEN 
										station.iStepAuto :=111;	
									END_IF
					END_IF
						station.iStepAuto :=115;	
		115://检查放料是否被允许
		IF  NOT station.xDone THEN
						IF	S10_BeltCarrying.station.xDone   AND   
									(arBeltLineFixtureData[5].xMaterialOnOff AND 
									arBeltLineFixtureData[6].xMaterialOnOff AND
									arBeltLineFixtureData[5].stProduct.xCardLoading_OK AND
									arBeltLineFixtureData[6].stProduct.xCardLoading_OK ) OR 
									S09_CardCarrying.station.xDisabled  THEN  
									IF   iPutPartPosChoose  =stPutPartPosChoose.CardPositon_1 THEN
												IF  NOT  S10_BeltCarrying.xBoxSensorReached[1] THEN
															station.iStepAuto :=120;    
												ELSE
													station.adwAlarm[1].09	:=	TRUE	;//	S07孔板搬运工位卡片1位置不可重复放置,请检查
												END_IF
									ELSIF	 iPutPartPosChoose  =stPutPartPosChoose.CardPostion_2 THEN
												IF  NOT  S10_BeltCarrying.xBoxSensorReached[2] THEN
															station.iStepAuto :=120;   
												ELSE
														station.adwAlarm[1].10	:=	TRUE	;//	S07孔板搬运工位卡片2位置不可重复放置,请检查 
												END_IF 
									END_IF
							END_IF	
						IF iPutPartPosChoose  =stPutPartPosChoose. BufferPostion THEN 
							 IF  NOT xBufferPosCheckSensor THEN
								 station.iStepAuto :=120;
							 ELSE
									 station.adwAlarm[1].11	:=	TRUE	;//	S07孔板搬运工位Bufffer位置不可重复放置,请检查 
							 END_IF
						ELSIF  iPutPartPosChoose  =stPutPartPosChoose.NGPositon THEN
							 IF  (NOT xNGPosCheckSensor[1] AND NOT  xNGPosCheckSensor[2]) AND   xNGPutBoxPermit  THEN
								 station.iStepAuto :=120;
							 ELSE
								 station.adwAlarm[1].12	:=	TRUE	;//	S07孔板搬运工位NG流道位置不可重复放置,请检查 
							 END_IF	
						END_IF
		END_IF 
	120:	///切换放料程序
			stToRobot1.iMoveMode := CmdRobot1.Cmd_PutPart ;//切换程序
			IF    stFromRobot1.xStepRunning  THEN
			 			stToRobot1.iMoveMode := CmdRobot1.noCmd ;
			 			station.iStepAuto :=125; 
			END_IF
	125://放料子程序运行
			stToRobot1.xStepRunPermit := TRUE ;
			IF stFromRobot1.xStepRunDone THEN
					stToRobot1.xStepRunPermit := FALSE ;
					station.iStepAuto :=130; 
	 		END_IF				
	130:	//机械手开始放料
			IF  fbMachine[1].xTryRun THEN
			 			IF  bRobCounter =1 THEN 
									 stToRobot1.xPutPos1Premit:=TRUE;(*卡片1位置 *)
									 IF stFromRobot1.xPutPos1Reached THEN 
											stToRobot1.xPutPos1Premit := FALSE ;
											station.iStepAuto :=140;
									 END_IF
						ELSIF  	 bRobCounter =2 THEN
											 stToRobot1.xPutPos2Premit:=TRUE;(*卡片2位置 *)
											 IF stFromRobot1.xPutPos2Reached THEN 
													stToRobot1.xPutPos2Premit := FALSE ;
													station.iStepAuto :=140;
											 END_IF
						END_IF
			ELSE
				CASE   iPutPartPosChoose OF
				 	stPutPartPosChoose.CardPositon_1: 
					
										 stToRobot1.xPutPos1Premit:=TRUE;(*卡片1位置 *)
										 IF stFromRobot1.xPutPos1Reached THEN 
												stToRobot1.xPutPos1Premit := FALSE ;
												station.iStepAuto :=140;
										 END_IF
						
					stPutPartPosChoose.CardPostion_2:
							
										 stToRobot1.xPutPos2Premit:=TRUE;(*卡片2位置 *)
										 IF stFromRobot1.xPutPos2Reached THEN 
												stToRobot1.xPutPos2Premit := FALSE ;
												station.iStepAuto :=140;
										 END_IF
					
					stPutPartPosChoose.NGPositon:
				
										stToRobot1.xPutPos3Premit:=TRUE;(*NG流道位置 *)
										IF stFromRobot1.xPutPos3Reached THEN 
											 stToRobot1.xPutPos3Premit := FALSE ;
											 station.iStepAuto :=140;
										END_IF
			
					stPutPartPosChoose.BufferPostion:
					
											stToRobot1.xPutPos4Premit:=TRUE;(*buffer位置 *)
											IF stFromRobot1.xPutPos4Reached THEN 
												 stToRobot1.xPutPos4Premit := FALSE ;
												 station.iStepAuto :=140;
											END_IF
				
					END_CASE
				END_IF
	140://机械手到位，松开夹爪
			tsModuleProcess[bRobCounter+3].xProcessStarted:=TRUE;
			IF fbMachine[1].xTryRun THEN
			 		station.iStepAuto:= 150;
			ELSE
				fbClamp.stOper.aReleaseControl[1]:=TRUE ;
				IF fbClamp.xDone  THEN 
					fbClamp.xExecute :=FALSE ;
					station.iStepAuto:= 150;
				END_IF		
			END_IF
	150://记录放完的位置标志位
		//	IF  iPutPartPosChoose=stPutPartPosChoose.CardPositon_1 THEN
		//	 	xPutBeltLineCompleted[1]:=TRUE;
		//	ELSIF iPutPartPosChoose=stPutPartPosChoose.CardPostion_2 THEN
		//	 	xPutBeltLineCompleted[2]:=TRUE;
		//	END_IF
			station.iStepAuto:= 155;
	155://机械手回中转位置
			tsModuleProcess[bRobCounter+3].xProcessCompleted:=TRUE;
			stToRobot1.xReleasePartDone:=TRUE;
				station.iStepAuto :=156; 
   156://机械手到达中转位置
			 xNGLinePremit:=TRUE;
			IF stFromRobot1.xPickTransferPosReached THEN
			 		stToRobot1.xReleasePartDone:=FALSE;
					station.iStepAuto :=170; 
	 		END_IF	
	170://循环+1
			bRobCounter :=bRobCounter +1;
			station.iStepAuto :=180; 
	180://判断是否继续
			IF   bRobCounter<=2 THEN
				station.iStepAuto :=50; 
			ELSE
				station.iStepAuto :=190; 
			END_IF
	190://是否需要第三次放料	
			IF   	S10_BeltCarrying.xBoxSensorReached[1] AND 
					 NOT S10_BeltCarrying.xBoxSensorReached[2] AND  
					xBufferPosCheckSensor THEN
					station.iStepAuto :=200; 
			ELSE
					station.iStepAuto :=300; 
			END_IF
	200:////Restore_after_Estop_Process6 机械手第三次取料流程
			IF  station.xSingleRunning OR fbMachine[1].xTryRun THEN
					station.iStepAuto :=210; 
			ELSIF tsModuleProcess[6].xProcessNotStarted AND NOT  tsModuleProcess[6].xProcessStarted THEN
					station.iStepAuto :=210; (*process not started*)
			ELSIF  tsModuleProcess[6].xProcessStarted AND NOT  tsModuleProcess[6].xProcessCompleted THEN
				 station.iStepAuto := 210;(*process started*)
			ELSIF  tsModuleProcess[6].xProcessCompleted AND NOT tsModuleProcess[6].xQDataCompleted  THEN
					station.iStepAuto :=260 ;(*process completed*)
			ELSIF tsModuleProcess[6].xQDataCompleted THEN
					station.iStepAuto :=260;(*Qdata completed *)
			ELSE
					station.iStepAuto :=210; 
			END_IF					
	210://	机械手切换到取料程序
			tsModuleProcess[6].xProcessNotStarted:=TRUE;	
			iPickPartPosChoose :=stTakePartPosChoose.BufferPostion; 
			stToRobot1.iMoveMode := CmdRobot1.Cmd_TakePart ;//切换程序
			IF  stFromRobot1.xStepRunning THEN
			 			stToRobot1.iMoveMode := CmdRobot1.noCmd ;
			 			station.iStepAuto :=220; 
			END_IF
	220://取料程序运行
			stToRobot1.xStepRunPermit := TRUE ;
			IF stFromRobot1.xStepRunDone THEN
					stToRobot1.xStepRunPermit := FALSE ;
					station.iStepAuto :=230; 
	 		END_IF	
	230://去Buffer位置的产品
				stToRobot1.xPickPos3Premit := TRUE ;
			 IF stFromRobot1.xPickPos3Reached THEN 
				stToRobot1.xPickPos3Premit := FALSE ;
				station.iStepAuto :=240;
			 END_IF
	240://电动夹爪夹取
			tsModuleProcess[6].xProcessStarted :=TRUE;
			IF NOT fbmachine[1].xTryRun THEN 
				station.iStepAuto :=250;
			ELSE
				fbClamp.stOper.aClampControl[1]:=TRUE ;
				IF fbClamp.xDone  OR ( fbClamp.xGripClampEmpty AND  fbmachine[1].xTryRun )   THEN
						fbClamp.xExecute :=FALSE ;
						station.iStepAuto :=250;
				END_IF
			END_IF
	250://夹取完成
			tsModuleProcess[6].xProcessCompleted:=TRUE; 
			stToRobot1.xClampPartDone :=TRUE;
		IF    stFromRobot1.xPickTransferPosReached THEN
					station.iStepAuto :=260;
		END_IF
	260://机械手切换放料程序
			stToRobot1.iMoveMode := CmdRobot1.Cmd_PutPart ;//切换程序
			IF  stFromRobot1.xStepRunning THEN
			 	stToRobot1.iMoveMode := CmdRobot1.noCmd ;
			 	station.iStepAuto :=265;
			END_IF
	265://运行放料程序
			stToRobot1.xStepRunPermit := TRUE ;
			IF stFromRobot1.xStepRunDone THEN
					stToRobot1.xStepRunPermit := FALSE ;
					station.iStepAuto :=270; 
	 		END_IF	
	270://放到皮带线位置2
			stToRobot1.xPutPos2Premit := TRUE ;
			 IF stFromRobot1.xPutPos4Reached THEN 
				stToRobot1.xPutPos2Premit := FALSE ;
				station.iStepAuto :=280;
			 END_IF				
	280://夹爪松开
			fbClamp.stOper.aReleaseControl[1]:=TRUE ;
			IF fbClamp.xDone  THEN 
			  fbClamp.xExecute :=FALSE ;
			  station.iStepAuto:= 290;
			END_IF		
	290://机械手回参考位置
			stToRobot1.xReleasePartDone:=TRUE;
			IF stFromRobot1.xPickTransferPosReached THEN
					station.iStepAuto :=300; 
	 		END_IF	
	300://清除本地记录
			FOR i:=1 TO gc_ModuleProNo BY 1 DO
				MEMSET(ADR(tsModuleProcess[i]),0,SIZEOF(tsModuleProcess[i]));
			END_FOR
			station.iStepAuto :=999; 
	999://----Single Run Finish----
		IF NOT station.xSingleContinuousRun THEN
			station.xSingleRunFlag:=FALSE;
		END_IF
		station.xCycleEnable:=FALSE;	
		IF arBeltLineFixtureData[5].xMaterialOnOff AND  arBeltLineFixtureData[6].xMaterialOnOff THEN   
					IF  (S10_BeltCarrying.xBoxSensorReached[1] AND S10_BeltCarrying.xBoxSensorReached[2]) THEN 
							station.xDone:=TRUE;
							station.iStepAuto :=0;
					END_IF
		ELSIF   NOT arBeltLineFixtureData[5].xMaterialOnOff AND  NOT arBeltLineFixtureData[6].xMaterialOnOff  THEN
						  station.xDone:=TRUE;
							station.iStepAuto :=0;
		END_IF
	ELSE
		;	
END_CASE
(****************NG流道********************)
CASE    iNGStep OF
	0://检查NG流道是否刚放上产品
		IF (xNGPosCheckSensor[1]  OR xNGPosCheckSensor[2]  )AND  xNGLinePremit THEN
				xNGPutBoxPermit:=FALSE;
				xNGLinePremit:=FALSE;
				iNGStep:=iNGStep +1 ;
		END_IF
	1://检查NG满料传感器检测
		arTonDelay[02](IN:= FALSE);
		_AlarmDisable:=FALSE;
		IF  xNGPosCheckSensor[3] THEN
			iNGStep:=iNGStep +1;
		ELSE
			iNGStep:=iNGStep +2 ;
		END_IF
	2:
		IF NOT _AlarmDisable THEN
			station.adwAlarm[1].01:=TRUE;//NG流道满料请处理	
			_AlarmDisable:=TRUE;
		END_IF
		iNGStep:=iNGStep -1 ;
	3://步进JOG速度
				fbAxis[19].rJogVelocity:=10.0;
				iNGStep:=iNGStep +1;
	4://开始JOG到目标位置
			_AlarmDisable:=FALSE;
			arTonDelay[02](IN:=TRUE  , PT:=T#200S , Q=> , ET=> );
			IF   NOT xNGPosCheckSensor[2] AND  NOT xNGPosCheckSensor[1]   THEN
							 fbNGStepMotor.xJogForwardAuto:=FALSE;
							 fbNGStepMotor.xJogForwardHmi:=FALSE;
							 iNGStep:=iNGStep +1;
			ELSE
			 			IF  fbMachine[1].xAutoMode THEN
						   fbNGStepMotor.xJogForwardAuto:=TRUE;
					 ELSIF station.xSingleRunning THEN
							 fbNGStepMotor.xJogForwardHmi:=TRUE;
					 END_IF
			END_IF
			IF  arTonDelay[02].Q  THEN
			 		fbNGStepMotor.xJogForwardAuto:=FALSE;
					fbNGStepMotor.xJogForwardHmi:=FALSE;
					arTonDelay[02](IN:=FALSE);
						iNGStep:=iNGStep +2;
			END_IF
			IF   xNGPosCheckSensor[3] THEN
			 		fbNGStepMotor.xJogForwardAuto:=FALSE;
					fbNGStepMotor.xJogForwardHmi:=FALSE;
						iNGStep:=iNGStep +3;
			END_IF
	5://JOG结束		
						iNGStep:=iNGStep +3;
	6://步进JOG超时，请检查传感器是否正常
		IF   NOT _AlarmDisable THEN
			station.adwAlarm[1].02:=TRUE;//NG流道步进运动超时 ，请检查传感器是否正常
			_AlarmDisable:=TRUE;
		END_IF
		iNGStep:=0;	
	7://NG流道满料 
		IF NOT _AlarmDisable THEN
			station.adwAlarm[1].01:=TRUE;//NG流道满料请处理	
			_AlarmDisable:=TRUE;
		END_IF
		iNGStep:=0;
	8://NG流道动作完成
		xNGPutBoxPermit:=TRUE;
		iNGStep:=0;
END_CASE


END_IF







































]]></ST>
      </Implementation>
    </Action>
    <Action Name="FlowInit" Id="{e33c1f2e-f716-4da2-9393-b751eba6f644}">
      <Implementation>
        <ST><![CDATA[IF NOT station.xIniting THEN
  station.iStepInit:=0;    
ELSE
//--------------------------------------------初始化步序----------------------------------
CASE station.iStepInit OF	
 0://  
  	IF station.xIniting THEN	
  	  station.iStepInit:=10;	
  	END_IF	
10://复位数据
	fbClamp.xExecute :=FALSE;
	fbClamp.stOper.xInitControl:=FALSE ;	
	FOR i:=1 TO gc_ModuleProNo BY 1 DO
				MEMSET(ADR(tsModuleProcess[i]),0,SIZEOF(tsModuleProcess[i]));
			END_FOR
	IF  NOT fbMachine[1].xTryRun THEN
		station.iStepInit :=30;
	ELSE
			station.iStepInit :=50;
	 END_IF
	 
//20://NG流道伺服上电
//	fbNGStepMotor.xPowerInit:=TRUE;
//	IF     fbNGStepMotor.xPowerOn THEN
//		station.iStepInit :=30;
//	END_IF
30://判断电动夹爪是否可以初始化
	IF    (tsModuleProcess[4].xProcessStarted AND  NOT tsModuleProcess[4].xProcessCompleted) OR
		  (tsModuleProcess[5].xProcessStarted AND  NOT tsModuleProcess[5].xProcessCompleted)  OR test THEN
			station.iStepInit :=50;(*电动夹爪不能初始h化*)
	ELSE
			station.iStepInit :=40;
	END_IF
40://大寰夹爪初始化
		fbClamp.stOper.xInitControl:=TRUE ;	
		 IF fbClamp.xDone  THEN 
				fbClamp.xExecute :=FALSE;
				station.iStepInit:=45;
		 END_IF	
45://大寰夹爪张开
			fbClamp.stOper.aReleaseControl[1]:=TRUE ;
				IF fbClamp.xDone  THEN 
					fbClamp.xExecute :=FALSE ;
					station.iStepInit:= 50;
				END_IF		
50:  //机械手初始化
		fbRobot.xInitExte := TRUE ;	
		station.iStepInit:=60;		
60:
		IF fbRobot.xInitFinish THEN 
			fbRobot.xInitExte := FALSE ;	
			station.iStepInit:=65;		
		END_IF		
65:
			stToRobot1.iMoveMode := CmdRobot1.Cmd_GoHome ;
			station.iStepInit:=70;	
70://机械手初始化	
	
		IF  stFromRobot1.xStepRunning THEN
		 		station.iStepInit:=80;	
				stToRobot1.iMoveMode := CmdRobot1.noCmd ;
		END_IF
80://运行初始化子程序
		stToRobot1.xStepRunPermit := TRUE ;
	 IF stFromRobot1.xStepRunDone  THEN
		stToRobot1.xStepRunPermit := FALSE ;
   		station.iStepInit:=90;	
	 END_IF
90://机械手初始化并检测机械手初始化完成
	 IF  stFromRobot1.xHomePosReached THEN
        station.iStepInit:=999;	
	 END_IF	

999://初始化完成	
	station.iStepInit:=0;
	station.xInitDone:=TRUE;  
END_CASE
END_IF
]]></ST>
      </Implementation>
    </Action>
    <Action Name="General" Id="{aae3ce53-6436-4399-85d9-97f8ae30c4fd}">
      <Implementation>
        <ST><![CDATA[EstopR_TRIG(CLK:= NOT  fbMachine[1].xEStop , Q=> );
IF  EstopR_TRIG.Q THEN 
		xS07MainlineRunPermit:=FALSE;
END_IF
MachineInitR_TRIG(CLK:=fbMachine[1].xIniting , Q=> );
IF MachineInitR_TRIG.Q THEN
		bRobCounter :=0;
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="ILC" Id="{846afd3f-54e8-4211-93f3-82cb70e642fc}">
      <Implementation>
        <ST><![CDATA[
//---------------------------------------------------工站可执行-------------------------------------------------------
station.xCanRun :=TRUE ;

//---------------------------------------------------伺服动作条件-------------------------------------------
fbNGStepMotor.xRunILC := TRUE;
fbNGStepMotor.xMoveILC[1] :=TRUE;
//大寰夹爪
fbClamp.xDeviceRunning:=station.xSingleRunning OR   station.xIniting OR   station.xRunning ;
]]></ST>
      </Implementation>
    </Action>
    <Action Name="TipAuto" Id="{45dca0ed-9b2c-437e-bcbb-5402a732053c}">
      <Implementation>
        <ST><![CDATA[
//------------------------------------------------AutoTip Cylinder--------------------------------

//------------------------------------------------AutoTip Servo--------------------------------
//**************************************
//FOR i:= 1 TO 5 BY 1 DO 
//	IF fbNGStepMotor.xMoveAuto[i] THEN
//		fbNGStepMotor.iPosNumber := i ;
//	END_IF
//	
//END_FOR
//
//
//IF  fbMachine[1].xAutoMode AND NOT fbMachine[1].xRunning AND  arTonDelay[10].Q   THEN
//		IF	fbNGStepMotor.iPosNumber=1 	AND NOT fbNGStepMotor.xMoveInPos[1] THEN 	station.adwAutoTip[1].10:=TRUE	;	END_IF//轴伺服自动时位置不在位置1
//		IF	fbNGStepMotor.iPosNumber=2	AND NOT fbNGStepMotor.xMoveInPos[2]	THEN 	station.adwAutoTip[1].11:=TRUE	;	END_IF//轴伺服自动时位置不在位置2
//		IF	fbNGStepMotor.iPosNumber=3	AND NOT fbNGStepMotor.xMoveInPos[3]	THEN 	station.adwAutoTip[1].12:=TRUE	;	END_IF//轴伺服自动时位置不在位置3
//		IF	fbNGStepMotor.iPosNumber=4	AND NOT fbNGStepMotor.xMoveInPos[4]	THEN 	station.adwAutoTip[1].13:=TRUE	;	END_IF//轴伺服自动时位置不在位置4
//		IF	fbNGStepMotor.iPosNumber=5	AND NOT fbNGStepMotor.xMoveInPos[5]	THEN 	station.adwAutoTip[1].14:=TRUE	;	END_IF//轴伺服自动时位置不在位置5
//END_IF
//]]></ST>
      </Implementation>
    </Action>
    <Action Name="TipManual" Id="{b0166c36-c841-4f28-b869-b778a7385f27}">
      <Implementation>
        <ST><![CDATA[//--------------------------------------------ManualTip------------------------------------------------------

//-------------------------------------------气缸提示---------------------------------------------------------




/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Z_Output" Id="{a11808b0-a8ee-46f9-9be6-f8c744d674fe}">
      <Implementation>
        <ST><![CDATA[(*
CASE  bRobotStep  OF
 0:
 		IF   xRobotStartTryRun  THEN
		 		 bRobotStep:=bRobotStep +1;
		END_IF
1:  //机械手初始化
		fbRobot.xInitExte := TRUE ;
		 bRobotStep:=bRobotStep +1;
2:
		IF fbRobot.xInitFinish THEN 
			fbRobot.xInitExte := FALSE ;	
			 bRobotStep:=bRobotStep +1;
		END_IF		
3://机械手初始化	
		stToRobot1.iMoveMode := CmdRobot1.Cmd_GoHome ;
		IF  stFromRobot1.xStepRunning THEN
		 		 bRobotStep:=bRobotStep +1;
				stToRobot1.iMoveMode := CmdRobot1.noCmd ;
		END_IF
4://运行初始化子程序
		stToRobot1.xStepRunPermit := TRUE ;
	 IF stFromRobot1.xStepRunDone  THEN
		stToRobot1.xStepRunPermit := FALSE ;
   	 bRobotStep:=bRobotStep +1;
	 END_IF
5://机械手初始化并检测机械手初始化完成
	 IF  stFromRobot1.xHomePosReached THEN
       bRobotStep:=bRobotStep +1;
	 END_IF	
6://机械手选择取料程序	
			stToRobot1.iMoveMode := CmdRobot1.Cmd_TakePart ;//切换程序
			IF    stFromRobot1.xStepRunning  THEN
			 			stToRobot1.iMoveMode := CmdRobot1.noCmd ;
			 			 bRobotStep:=bRobotStep +1;
			END_IF
7://取料子程序运行
			stToRobot1.xStepRunPermit := TRUE ;
			IF stFromRobot1.xStepRunDone THEN
					stToRobot1.xStepRunPermit := FALSE ;
					 bRobotStep:=bRobotStep +1;
	 		END_IF
8:	//机械手允许去取料位
				 	stToRobot1.xPickPos1Premit :=TRUE;
						IF stFromRobot1.xPickPos1Reached THEN 
							 stToRobot1.xPickPos1Premit := FALSE ;
							 	 bRobotStep:=bRobotStep +1;
						END_IF
9://夹取完成,机械手回中转位
				stToRobot1.xClampPartDone:=TRUE;
			IF   stFromRobot1.xPickTransferPosReached THEN
					 bRobotStep:=bRobotStep +1;
			END_IF
10:
			stToRobot1.iMoveMode := CmdRobot1.Cmd_PutPart ;//切换程序
			IF    stFromRobot1.xStepRunning  THEN
			 			stToRobot1.iMoveMode := CmdRobot1.noCmd ;
			 		 bRobotStep:=bRobotStep +1;
			END_IF
11://放料子程序运行
			stToRobot1.xStepRunPermit := TRUE ;
			IF stFromRobot1.xStepRunDone THEN
					stToRobot1.xStepRunPermit := FALSE ;
					 bRobotStep:=bRobotStep +1;
	 		END_IF
12:	//机械手开始放料
			stToRobot1.xPutPos1Premit:=TRUE;(*卡片1位置 *)
			IF stFromRobot1.xPutPos1Reached THEN 
				 stToRobot1.xPutPos1Premit := FALSE ;
				 bRobotStep:=bRobotStep +1;
			END_IF
13://机械手回中转位置
			stToRobot1.xReleasePartDone:=TRUE;
			IF stFromRobot1.xPickTransferPosReached THEN
					bRobotStep:=0;
	 		END_IF	
END_CASE
*)]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="S07_BoxCarrying">
      <LineId Id="63" Count="8" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="S07_BoxCarrying.A_Input">
      <LineId Id="28" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="109" Count="1" />
      <LineId Id="113" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="S07_BoxCarrying.Alarm">
      <LineId Id="176" Count="1" />
      <LineId Id="262" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="268" Count="0" />
      <LineId Id="270" Count="4" />
      <LineId Id="276" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="275" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="285" Count="1" />
      <LineId Id="279" Count="0" />
      <LineId Id="291" Count="2" />
      <LineId Id="289" Count="0" />
    </LineIds>
    <LineIds Name="S07_BoxCarrying.Delay">
      <LineId Id="64" Count="7" />
      <LineId Id="75" Count="0" />
      <LineId Id="72" Count="2" />
      <LineId Id="44" Count="13" />
      <LineId Id="40" Count="0" />
    </LineIds>
    <LineIds Name="S07_BoxCarrying.FlowAuto">
      <LineId Id="2830" Count="5" />
      <LineId Id="3663" Count="0" />
      <LineId Id="2836" Count="9" />
      <LineId Id="3711" Count="0" />
      <LineId Id="2846" Count="12" />
      <LineId Id="3659" Count="3" />
      <LineId Id="3658" Count="0" />
      <LineId Id="2860" Count="7" />
      <LineId Id="3739" Count="0" />
      <LineId Id="2868" Count="2" />
      <LineId Id="3740" Count="0" />
      <LineId Id="2871" Count="3" />
      <LineId Id="3251" Count="1" />
      <LineId Id="2875" Count="21" />
      <LineId Id="2898" Count="0" />
      <LineId Id="3709" Count="0" />
      <LineId Id="2902" Count="0" />
      <LineId Id="3253" Count="1" />
      <LineId Id="2903" Count="10" />
      <LineId Id="2926" Count="0" />
      <LineId Id="2928" Count="0" />
      <LineId Id="3269" Count="0" />
      <LineId Id="3265" Count="0" />
      <LineId Id="3476" Count="0" />
      <LineId Id="3266" Count="1" />
      <LineId Id="3264" Count="0" />
      <LineId Id="2935" Count="5" />
      <LineId Id="3271" Count="0" />
      <LineId Id="3274" Count="0" />
      <LineId Id="3278" Count="0" />
      <LineId Id="3280" Count="0" />
      <LineId Id="3277" Count="0" />
      <LineId Id="3275" Count="0" />
      <LineId Id="3272" Count="0" />
      <LineId Id="3282" Count="0" />
      <LineId Id="3284" Count="0" />
      <LineId Id="3281" Count="0" />
      <LineId Id="3273" Count="0" />
      <LineId Id="3697" Count="3" />
      <LineId Id="2946" Count="0" />
      <LineId Id="2951" Count="12" />
      <LineId Id="3567" Count="0" />
      <LineId Id="3565" Count="0" />
      <LineId Id="2967" Count="0" />
      <LineId Id="3316" Count="0" />
      <LineId Id="3701" Count="0" />
      <LineId Id="3705" Count="1" />
      <LineId Id="3704" Count="0" />
      <LineId Id="3702" Count="1" />
      <LineId Id="3753" Count="0" />
      <LineId Id="4182" Count="2" />
      <LineId Id="3002" Count="0" />
      <LineId Id="3004" Count="0" />
      <LineId Id="3257" Count="1" />
      <LineId Id="3005" Count="10" />
      <LineId Id="3519" Count="0" />
      <LineId Id="3657" Count="0" />
      <LineId Id="3525" Count="0" />
      <LineId Id="3597" Count="0" />
      <LineId Id="3636" Count="0" />
      <LineId Id="3609" Count="0" />
      <LineId Id="3637" Count="0" />
      <LineId Id="3639" Count="0" />
      <LineId Id="3638" Count="0" />
      <LineId Id="3610" Count="2" />
      <LineId Id="3712" Count="0" />
      <LineId Id="3598" Count="0" />
      <LineId Id="3613" Count="0" />
      <LineId Id="3625" Count="0" />
      <LineId Id="3614" Count="0" />
      <LineId Id="3627" Count="0" />
      <LineId Id="3641" Count="2" />
      <LineId Id="3626" Count="0" />
      <LineId Id="3615" Count="1" />
      <LineId Id="3599" Count="0" />
      <LineId Id="3713" Count="0" />
      <LineId Id="3600" Count="0" />
      <LineId Id="3550" Count="0" />
      <LineId Id="3715" Count="0" />
      <LineId Id="3717" Count="1" />
      <LineId Id="3724" Count="1" />
      <LineId Id="3727" Count="0" />
      <LineId Id="3722" Count="0" />
      <LineId Id="3719" Count="0" />
      <LineId Id="3726" Count="0" />
      <LineId Id="3574" Count="0" />
      <LineId Id="4189" Count="0" />
      <LineId Id="4164" Count="0" />
      <LineId Id="3776" Count="3" />
      <LineId Id="4190" Count="0" />
      <LineId Id="4158" Count="0" />
      <LineId Id="4167" Count="1" />
      <LineId Id="4171" Count="0" />
      <LineId Id="4173" Count="0" />
      <LineId Id="4166" Count="0" />
      <LineId Id="4161" Count="0" />
      <LineId Id="4169" Count="1" />
      <LineId Id="4174" Count="1" />
      <LineId Id="4162" Count="0" />
      <LineId Id="4159" Count="0" />
      <LineId Id="3754" Count="0" />
      <LineId Id="3588" Count="2" />
      <LineId Id="4176" Count="1" />
      <LineId Id="3591" Count="3" />
      <LineId Id="4180" Count="1" />
      <LineId Id="3595" Count="1" />
      <LineId Id="3573" Count="0" />
      <LineId Id="3552" Count="5" />
      <LineId Id="3559" Count="4" />
      <LineId Id="3517" Count="0" />
      <LineId Id="3411" Count="0" />
      <LineId Id="3673" Count="0" />
      <LineId Id="3692" Count="0" />
      <LineId Id="3682" Count="4" />
      <LineId Id="3693" Count="0" />
      <LineId Id="3688" Count="3" />
      <LineId Id="3676" Count="0" />
      <LineId Id="3694" Count="0" />
      <LineId Id="3675" Count="0" />
      <LineId Id="3425" Count="0" />
      <LineId Id="3427" Count="0" />
      <LineId Id="4130" Count="0" />
      <LineId Id="3431" Count="3" />
      <LineId Id="3429" Count="0" />
      <LineId Id="4133" Count="0" />
      <LineId Id="3435" Count="0" />
      <LineId Id="4134" Count="4" />
      <LineId Id="3430" Count="0" />
      <LineId Id="4141" Count="0" />
      <LineId Id="3441" Count="0" />
      <LineId Id="4142" Count="0" />
      <LineId Id="3442" Count="4" />
      <LineId Id="4146" Count="0" />
      <LineId Id="3447" Count="0" />
      <LineId Id="4147" Count="0" />
      <LineId Id="3448" Count="3" />
      <LineId Id="3440" Count="0" />
      <LineId Id="4151" Count="0" />
      <LineId Id="3428" Count="0" />
      <LineId Id="3695" Count="0" />
      <LineId Id="3066" Count="0" />
      <LineId Id="3071" Count="0" />
      <LineId Id="3664" Count="2" />
      <LineId Id="3072" Count="4" />
      <LineId Id="3667" Count="0" />
      <LineId Id="3629" Count="0" />
      <LineId Id="3633" Count="0" />
      <LineId Id="3631" Count="0" />
      <LineId Id="3634" Count="0" />
      <LineId Id="3632" Count="0" />
      <LineId Id="3630" Count="0" />
      <LineId Id="3635" Count="0" />
      <LineId Id="3077" Count="0" />
      <LineId Id="3082" Count="1" />
      <LineId Id="3671" Count="0" />
      <LineId Id="3669" Count="0" />
      <LineId Id="3856" Count="0" />
      <LineId Id="3084" Count="0" />
      <LineId Id="3668" Count="0" />
      <LineId Id="3085" Count="12" />
      <LineId Id="3646" Count="0" />
      <LineId Id="3650" Count="0" />
      <LineId Id="3098" Count="4" />
      <LineId Id="3261" Count="1" />
      <LineId Id="3103" Count="14" />
      <LineId Id="3452" Count="0" />
      <LineId Id="3478" Count="0" />
      <LineId Id="3454" Count="1" />
      <LineId Id="3453" Count="0" />
      <LineId Id="3118" Count="4" />
      <LineId Id="3648" Count="0" />
      <LineId Id="3465" Count="3" />
      <LineId Id="3458" Count="0" />
      <LineId Id="3130" Count="17" />
      <LineId Id="3149" Count="0" />
      <LineId Id="3473" Count="0" />
      <LineId Id="3479" Count="0" />
      <LineId Id="3474" Count="1" />
      <LineId Id="3472" Count="0" />
      <LineId Id="3150" Count="25" />
      <LineId Id="3786" Count="0" />
      <LineId Id="3184" Count="0" />
      <LineId Id="3187" Count="3" />
      <LineId Id="3782" Count="0" />
      <LineId Id="4108" Count="0" />
      <LineId Id="3785" Count="0" />
      <LineId Id="4187" Count="0" />
      <LineId Id="4112" Count="0" />
      <LineId Id="4185" Count="1" />
      <LineId Id="4188" Count="0" />
      <LineId Id="3781" Count="0" />
      <LineId Id="3193" Count="2" />
      <LineId Id="3972" Count="67" />
      <LineId Id="3245" Count="0" />
      <LineId Id="3250" Count="0" />
      <LineId Id="1224" Count="0" />
      <LineId Id="3861" Count="38" />
      <LineId Id="3860" Count="0" />
    </LineIds>
    <LineIds Name="S07_BoxCarrying.FlowInit">
      <LineId Id="437" Count="9" />
      <LineId Id="724" Count="0" />
      <LineId Id="740" Count="0" />
      <LineId Id="721" Count="1" />
      <LineId Id="720" Count="0" />
      <LineId Id="706" Count="0" />
      <LineId Id="467" Count="0" />
      <LineId Id="710" Count="0" />
      <LineId Id="713" Count="0" />
      <LineId Id="711" Count="1" />
      <LineId Id="598" Count="0" />
      <LineId Id="616" Count="1" />
      <LineId Id="622" Count="0" />
      <LineId Id="619" Count="0" />
      <LineId Id="688" Count="6" />
      <LineId Id="725" Count="4" />
      <LineId Id="687" Count="0" />
      <LineId Id="731" Count="0" />
      <LineId Id="736" Count="3" />
      <LineId Id="730" Count="0" />
      <LineId Id="634" Count="1" />
      <LineId Id="716" Count="0" />
      <LineId Id="638" Count="3" />
      <LineId Id="633" Count="0" />
      <LineId Id="717" Count="2" />
      <LineId Id="662" Count="1" />
      <LineId Id="701" Count="0" />
      <LineId Id="703" Count="0" />
      <LineId Id="705" Count="0" />
      <LineId Id="704" Count="0" />
      <LineId Id="702" Count="0" />
      <LineId Id="664" Count="8" />
      <LineId Id="686" Count="0" />
      <LineId Id="462" Count="4" />
      <LineId Id="436" Count="0" />
    </LineIds>
    <LineIds Name="S07_BoxCarrying.General">
      <LineId Id="383" Count="0" />
      <LineId Id="386" Count="0" />
      <LineId Id="384" Count="0" />
      <LineId Id="387" Count="0" />
      <LineId Id="392" Count="1" />
      <LineId Id="391" Count="0" />
      <LineId Id="394" Count="0" />
    </LineIds>
    <LineIds Name="S07_BoxCarrying.ILC">
      <LineId Id="234" Count="2" />
      <LineId Id="307" Count="0" />
      <LineId Id="290" Count="0" />
      <LineId Id="326" Count="1" />
      <LineId Id="329" Count="2" />
    </LineIds>
    <LineIds Name="S07_BoxCarrying.TipAuto">
      <LineId Id="118" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="148" Count="5" />
      <LineId Id="187" Count="0" />
      <LineId Id="157" Count="3" />
      <LineId Id="214" Count="4" />
      <LineId Id="191" Count="0" />
      <LineId Id="183" Count="0" />
    </LineIds>
    <LineIds Name="S07_BoxCarrying.TipManual">
      <LineId Id="137" Count="1" />
      <LineId Id="176" Count="0" />
      <LineId Id="262" Count="1" />
      <LineId Id="246" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="41" Count="0" />
    </LineIds>
    <LineIds Name="S07_BoxCarrying.Z_Output">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="42" Count="0" />
      <LineId Id="22" Count="19" />
      <LineId Id="18" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="52" Count="11" />
      <LineId Id="65" Count="4" />
      <LineId Id="92" Count="2" />
      <LineId Id="97" Count="1" />
      <LineId Id="100" Count="5" />
      <LineId Id="174" Count="6" />
      <LineId Id="183" Count="4" />
      <LineId Id="218" Count="0" />
      <LineId Id="224" Count="2" />
      <LineId Id="43" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="227" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
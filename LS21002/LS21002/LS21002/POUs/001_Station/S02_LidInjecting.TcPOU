<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="S02_LidInjecting" Id="{a38d9a95-fec8-438d-a2d4-6ac0d9bd8547}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM S02_LidInjecting
VAR
	//工站
	station					: REFERENCE TO FB_Station:=fbstation[2];
	//气缸
	fbHOZAdjustCyl_1	:REFERENCE TO FB_Cylinder:=fbCylinder[7];	//	上层水平调整气缸1
//	fbHOZAdjustCyl_2	:REFERENCE TO FB_Cylinder:=fbCylinder[8];	//	上层水平调整气缸2
	fbHOZAdjustCyl_3	:REFERENCE TO FB_Cylinder:=fbCylinder[9];	//	下层水平调整气缸1
//	fbHOZAdjustCyl_4	:REFERENCE TO FB_Cylinder:=fbCylinder[10];	//	下层水平调整气缸2
	fbROTCyl	:REFERENCE TO FB_Cylinder:=fbCylinder[11];	//	旋转气缸-防滴液
	//伺服
	fbXAxisMove	 :REFERENCE TO FB_Axis:=fbAxis[3];	//	注液工位X轴伺服
	fbYAxisMove	 :REFERENCE TO FB_Axis:=fbAxis[4];	//	注液工位Y轴伺服
	fbZAxisMove	 :REFERENCE TO FB_Axis:=fbAxis[5];	//	注液工位Z轴伺服
	fbStirAxis	 :REFERENCE TO FB_Axis:=fbAxis[9];	//	磁珠搅拌
	//蠕动泵
	(*直接用全局变量*)
	//称
	fbMKC204C:REFERENCE TO FB_MT_MKC:=fbMCK204w;
	//自动校准
	fbAutoCalib	:REFERENCE TO FB_AutoCal:=fbAutoCal;

	//延时
	arTonDelay :ARRAY[1..20] OF TON;
	//返回值
	UdiReturnValue :ARRAY[1..20] OF UDINT;
	//本地过程数据
	arProcessDataStation : ARRAY [1..2] OF DUT_MainlineFixture;
	i: INT;
	xNeedCalibration: BOOL;
	// 蠕动泵校准完成
	xCalibCompleted: BOOL;
	// X轴循环
	bXCounter: BYTE;
	//过程记录
	tsModuleProcess:ARRAY[1..gc_ModuleProNo] OF DUT_Process;
	xClearModuleProcessDone:BOOL;
	bClearProcessStep	:BYTE;
	// //首次循环
	_FirstCycle: ARRAY[1..10] OF BOOL;
	//深孔板到位传感器
	xSensorReached:ARRAY[1..2] OF BOOL;
	// 蠕动泵控制器个数
	bPumpControllerCounter: BYTE;
	// 校准延时定时器
	tSteadyTimer: TON;
	//蠕动泵排空使用
	RudongPump_R_TRIG:ARRAY[1..2] OF R_TRIG;
	// 排空液体步骤
	iRudongPumpEmptyStep,iRudongPumpEmptyOldStep: INT;
	//排空液体超时
	tEmptyTimeOut:TON;
	// 校准注液次数
	_InjectCounuter: INT;
	//校准注液的实际液量
	arrMckDisplay:ARRAY[1..10] OF REAL;
	//校准超时
	tCalibrationTimeOut:TON;
	//校准步骤
	iCalibStep:INT;
	tMCalibTimeOut:TON;
	// 临时变量
	arrVolume: ARRAY[1..2] of REAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[A_Input();
Alarm();
Delay();
FlowAuto();
FlowInit();
General();
ILC();
TipAuto();
TipManual();
Z_Output();]]></ST>
    </Implementation>
    <Action Name="A_Input" Id="{36d6adff-dfed-4462-bb55-6ba3884a334f}">
      <Implementation>
        <ST><![CDATA[//气缸

fbHOZAdjustCyl_1.xWP_Sensor	:=	IxS02HOZAdjustCyl_1WP  AND IxS02HOZAdjustCyl_2WP	;
fbHOZAdjustCyl_1.xHP_Sensor	:=	IxS02HOZAdjustCyl_1HP	 AND IxS02HOZAdjustCyl_2HP;
fbHOZAdjustCyl_3.xWP_Sensor	:=	IxS02HOZAdjustCyl_3WP	AND IxS02HOZAdjustCyl_4WP	;
fbHOZAdjustCyl_3.xHP_Sensor	:=	IxS02HOZAdjustCyl_3HP	AND IxS02HOZAdjustCyl_4HP;;
fbROTCyl.xWP_Sensor	:=	IxS02ROTCylWP	;
fbROTCyl.xHP_Sensor	:=	IxS02ROTCylHP	;

xSensorReached[1]:=IxS02Sensor1Reached	;//	注液工位¶到位传感器1
xSensorReached[2]:=IxS02Sensor2Reached	;//	注液工位¶到位传感器2]]></ST>
      </Implementation>
    </Action>
    <Action Name="Alarm" Id="{830c4921-b54b-4c6d-a396-f5d5eb2c5278}">
      <Implementation>
        <ST><![CDATA[station.adwAlarm[1].00	:=	station.xInitTimeout	;//	S02 初始化超时
//station.adwAlarm[1].01	:=	fbRudongPump[1].xError	;//	S02注液工位蠕动泵1报错
//station.adwAlarm[1].02	:=	fbRudongPump[2].xError	;//	S02注液工位蠕动泵2报错
//station.adwAlarm[1].03	:=	fbRudongPump[3].xError	;//	S02注液工位蠕动泵3报错
//station.adwAlarm[1].04	:=	fbRudongPump[4].xError	;//	S02注液工位蠕动泵4报错
//station.adwAlarm[1].05	:=	fbRudongPump[5].xError	;//	S02注液工位蠕动泵5报错
//station.adwAlarm[1].06	:=	fbRudongPump[6].xError	;//	S02注液工位蠕动泵6报错
//station.adwAlarm[1].07	:=	fbRudongPump[7].xError	;//	S02注液工位蠕动泵7报错
//station.adwAlarm[1].08	:=	fbRudongPump[8].xError	;//	S02注液工位蠕动泵8报错
//station.adwAlarm[1].09	:=	fbRudongPump[9].xError	;//	S02注液工位蠕动泵9报错
//station.adwAlarm[1].10	:=	fbRudongPump[10].xError	;//	S02注液工位蠕动泵10报错
//station.adwAlarm[1].11	:=	fbRudongPump[11].xError	;//	S02注液工位蠕动泵11报错
//station.adwAlarm[1].12	:=	fbRudongPump[12].xError	;//	S02注液工位蠕动泵12报错
station.adwAlarm[1].13	:=	fbHOZAdjustCyl_1.xHP_Off 	;//	S02上层水平调整气缸1原点未到位
station.adwAlarm[1].14	:=	fbHOZAdjustCyl_1.xWP_Off 	;//	S02上层水平调整气缸1动点未到位
station.adwAlarm[1].15	:=	fbHOZAdjustCyl_3.xHP_Off	;//	S02下层水平调整气缸1原点未到位
station.adwAlarm[1].16	:=	fbHOZAdjustCyl_3.xWP_Off	;//	S02下层水平调整气缸1动点未到位
station.adwAlarm[1].17	:=	fbROTCyl.xHP_Off	;//	S02防滴液旋转气缸原点未到位
station.adwAlarm[1].18	:=	fbROTCyl.xWP_Off	;//	S02防滴液旋转气缸动点未到位
station.adwAlarm[1].19	:=	fbXAxisMove.xError	;//	S02注液工位X轴伺服报错
station.adwAlarm[1].20	:=	fbXAxisMove.xNotPowerOn	;//	S02注液工位X轴伺服未使能
station.adwAlarm[1].21	:=	fbXAxisMove.xMoveTimeout	;//	S02注液工位X轴伺服移动超时
station.adwAlarm[1].22	:=	fbYAxisMove.xError	;//	S02注液工位Y轴伺服报错
station.adwAlarm[1].23	:=	fbYAxisMove.xNotPowerOn	;//	S02注液工位Y轴伺服未使能
station.adwAlarm[1].24	:=	fbYAxisMove.xMoveTimeout	;//	S02注液工位Y轴伺服移动超时
station.adwAlarm[1].25	:=	fbZAxisMove.xError	;//	S02注液工位Z轴伺服报错
station.adwAlarm[1].26	:=	fbZAxisMove.xNotPowerOn	;//	S02注液工位Z轴伺服未使能
station.adwAlarm[1].27	:=	fbZAxisMove.xMoveTimeout	;//	S02注液工位Z轴伺服移动超时
//station.adwAlarm[1].28	:=	fbStirAxis.xError	;//	S02注液工位搅拌旋转伺服报错
//station.adwAlarm[1].29	:=	fbStirAxis.xNotPowerOn	;//	S02注液工位搅拌旋转伺服未使能
//station.adwAlarm[1].30	:=	fbStirAxis.xMoveTimeout	;//	S02注液工位搅拌旋转伺服移动超时
station.adwAlarm[1].31	:=	fbMKC204C.xError	;//	S03注液工位称重设备报警

(*station.adwAlarm[2].0	:=	TRUE	;//S03注液工位排空超时.*)]]></ST>
      </Implementation>
    </Action>
    <Action Name="Delay" Id="{7f460a8e-34d3-43b7-a3e6-d254bf0f5a76}">
      <Implementation>
        <ST><![CDATA[
arTonDelay[01](IN:=, PT:=T#1S , Q=> , ET=> );
arTonDelay[02](IN:= , PT:=T#1S , Q=> , ET=> );//注液延时使用
arTonDelay[03](IN:= , PT:=T#10S , Q=> , ET=> );
arTonDelay[04](IN:= , PT:=T#0.1S , Q=> , ET=> );
arTonDelay[05](IN:= , PT:=T#0.1S , Q=> , ET=> );
arTonDelay[06](IN:= , PT:=T#0.1S , Q=> , ET=> );
arTonDelay[07](IN:=NOT  fbXAxisMove.xbusy, PT:=T#0.1S , Q=> , ET=> );//TipAuto使用
arTonDelay[08](IN:=NOT  fbYAxisMove.xbusy , PT:=T#0.1S , Q=> , ET=> );//TipAuto使用
arTonDelay[09](IN:= NOT  fbZAxisMove.xbusy, PT:=T#0.1S , Q=> , ET=> );//TipAuto使用
arTonDelay[10](IN:= NOT fbStirAxis.xbusy, PT:=T#0.1S , Q=> , ET=> );//TipAuto使用
















]]></ST>
      </Implementation>
    </Action>
    <Action Name="FlowAuto" Id="{fc69cc4e-5f82-426b-8c9c-24d79ab9c947}">
      <Implementation>
        <ST><![CDATA[
//-----------------------------------------初始化是否完成判断----------------------------------------------
IF NOT station.xInitDone 
THEN
 	station.iStepAuto:=0;
 	station.xDone:=FALSE;
	station.xRunningOffProhibit := FALSE ;//运行中信号Off禁止
ELSIF station.xRunning OR  
(tsModuleProcess[bXCounter+1].xProcessStarted AND  NOT tsModuleProcess[bXCounter+1].xProcessCompleted)//注液流程
THEN
//-----------------------------------------动作步骤--------------------------------------------------------
CASE station.iStepAuto OF	  
	0: //----Home Step，等待启动----
		IF station.xDisabled 
			AND station.xCanRun 
			AND NOT fbMachine[1].xStopped 
			AND NOT station.xSingleRunning 
		THEN
			station.xDone:=TRUE;
		END_IF
		
		IF  station.xSingleRunning 
			OR station.xCanRun 
			AND NOT station.xDone 
			AND NOT station.xDisabled 
			AND NOT fbMachine[1].xStopped
		THEN
			station.xCycleEnable:=TRUE;
			station.xDone:= FALSE;  
			station.iStepAuto:= 10;
		END_IF
    10: //复位数据 
			FOR i:=1 TO gc_ModuleProNo BY 1 DO
				MEMSET(ADR(tsModuleProcess[i]),0,SIZEOF(tsModuleProcess[i]));
			END_FOR
			station.iStepAuto:=15;
	
	 15://程序分类选择
			IF NOT   fbMachine[1].xTryRun THEN
					 IF  station.xSingleRunning AND stCalibration.xNeedCalibration THEN//进入校准程序
							stCalibration.xWindowsTrigger:=TRUE;
							station.iStepAuto:=1000;
					 ELSE //进入正常程序
						 station.iStepAuto:=20;
					 END_IF
		 ELSE
					 station.iStepAuto:=20;
			END_IF
	20:////Restore_after_Estop_Process1 上载数据流程
			IF  station.xSingleRunning THEN  //OR fbMachine[1].xTryRun THEN
					station.iStepAuto :=45; 
			ELSIF tsModuleProcess[1].xProcessNotStarted AND NOT  tsModuleProcess[1].xProcessStarted THEN
					station.iStepAuto :=21; (*process not started*)
			ELSIF  tsModuleProcess[1].xProcessStarted AND NOT  tsModuleProcess[1].xProcessCompleted THEN
				 station.iStepAuto :=21 ;(*process started*)
			ELSIF  tsModuleProcess[1].xProcessCompleted AND NOT tsModuleProcess[1].xQDataCompleted  THEN
					station.iStepAuto :=30  ;(*process completed*)
			ELSIF tsModuleProcess[1].xQDataCompleted THEN
					station.iStepAuto :=30;(*Qdata completed *)
			ELSE
					station.iStepAuto :=21; 
			END_IF	
	21:	
			tsModuleProcess[1].xProcessNotStarted :=TRUE;
			station.iStepAuto :=25;
	25://数据load 
		tsModuleProcess[1].xProcessStarted:=TRUE;
		MEMCPY(ADR(arProcessDataStation[1]),ADR(arMainlineFixtureData[arCurFixtureNumStation[3]]),SIZEOF(arMainlineFixtureData[arCurFixtureNumStation[3]]));
		MEMCPY(ADR(arProcessDataStation[2]),ADR(arMainlineFixtureData[arCurFixtureNumStation[4]]),SIZEOF(arMainlineFixtureData[arCurFixtureNumStation[4]]));
		tsModuleProcess[1].xProcessCompleted:=TRUE;	
		tsModuleProcess[1].xQDataCompleted:=TRUE;	
		station.iStepAuto:= 30;

	/////产品流程开始	
	30: //判断产品状态
			 IF NOT  fbMachine[1].xTryRun THEN
					IF    station.xEmptyDone THEN //清料完成
							 station.iStepAuto:=998;
					ELSIF     //清料程序执行条件
							 arProcessDataStation[1].stProduct.xEmptying AND 
							 arProcessDataStation[2].stProduct.xEmptying AND 
							 NOT xSensorReached[1] AND  NOT   xSensorReached[2] THEN
										station.xEmptying :=TRUE;	
									  station.iStepAuto:= 2000;        
					ELSIF   (arProcessDataStation[1].xMaterialOnOff   AND
								  arProcessDataStation[2].xMaterialOnOff ) OR
									(xSensorReached[1] AND   xSensorReached[2])  THEN
										station.iStepAuto:= 40;  
					ELSIF		 NOT arProcessDataStation[1].xMaterialOnOff   AND
								   NOT arProcessDataStation[2].xMaterialOnOff  AND 
									 NOT xSensorReached[1]  AND  NOT xSensorReached[2]  THEN
									station.iStepAuto:= 998;
					END_IF
			 ELSE
					 station.iStepAuto:= 40;
			 END_IF
	40://写入NOK按钮
		IF   arManualNOKHmiButton[2]  AND NOT station.xSingleRunning THEN
			station.iStepAuto:=155;
			arManualNOKHmiButton[2]:=FALSE;
		ELSE
			 station.iStepAuto:=45;
		END_IF
	
	//////产品流程开始
	45://循环开始次数为1，总循环为2
			 bXCounter:=1;
	    station.iStepAuto:= 50;

	50:////Restore_after_Estop_Process1/2 注液流程1/2
			IF  station.xSingleRunning  OR fbMachine[1].xTryRun THEN
					station.iStepAuto :=80; 
			ELSIF tsModuleProcess[bXCounter+1].xProcessNotStarted AND NOT  tsModuleProcess[bXCounter+1].xProcessStarted THEN
					station.iStepAuto :=100; (*process not started*)
			ELSIF  tsModuleProcess[bXCounter+1].xProcessStarted AND NOT  tsModuleProcess[bXCounter+1].xProcessCompleted THEN
				 station.iStepAuto :=155 ;(*process started*)
			ELSIF  tsModuleProcess[bXCounter+1].xProcessCompleted AND NOT tsModuleProcess[bXCounter+1].xQDataCompleted  THEN
					station.iStepAuto :=150  ;(*process completed*)
			ELSIF tsModuleProcess[bXCounter+1].xQDataCompleted THEN
					station.iStepAuto :=160;(*Qdata completed *)
			ELSE
					station.iStepAuto :=80; 
			END_IF

	80://流程未开始
			 tsModuleProcess[bXCounter+1].xProcessNotStarted:=TRUE;
		 		station.iStepAuto:= 90;
	90://水平调整气缸伸出
		IF  iBoxChoose =1 THEN
			(*上层水平调整气缸*)
			fbHOZAdjustCyl_1.xAuto :=TRUE;
		//	fbHOZAdjustCyl_2.xAuto :=TRUE;
			IF  fbHOZAdjustCyl_1.xWP_Delay THEN// AND fbHOZAdjustCyl_2.xWP_Delay  THEN
					station.iStepAuto:= 100;
			END_IF
		ELSIF  iBoxChoose= 2 THEN
			(*下层水平调整气缸*)
			fbHOZAdjustCyl_3.xAuto :=TRUE;
			//fbHOZAdjustCyl_4.xAuto :=TRUE;
			IF  fbHOZAdjustCyl_3.xWP_Delay  THEN//AND fbHOZAdjustCyl_4.xWP_Delay  THEN
					station.iStepAuto:= 100;
			END_IF
		END_IF	 
	100://XY轴去注液位置1、2
			fbXAxisMove.xMoveAuto[bXCounter+1]:=TRUE;
			fbYAxisMove.xMoveAuto[bXCounter+1]:=TRUE;
			IF fbXAxisMove.xMoveInPos[bXCounter+1]  AND fbYAxisMove.xMoveInPos[bXCounter+1]  THEN
				station.iStepAuto:=110;	
			END_IF
	110:	//防滴液气缸伸出
		fbROTCyl.xAuto:=TRUE;
		IF fbROTCyl.xWP_Delay THEN
			station.iStepAuto:=120;	
		END_IF
	120://Z轴下降去注液位置
		   fbZAxisMove.xMoveAuto[2]:=TRUE;
		IF  fbZAxisMove.xMoveInPos[2] THEN
			station.iStepAuto:=125;
		END_IF
	125://屏蔽注液
			IF   axBypassSignal[2] OR fbMachine[1].xTryRun THEN
				station.iStepAuto:=145;
			ELSE
				station.iStepAuto:=130;
			END_IF
	130://开始注液
		  tsModuleProcess[bXCounter+1].xProcessStarted:=TRUE;
		 FOR i:=1 TO  12 BY 1 DO
						fbEasyPumps[i].stDeviceOpe.xPush_Auto[iBoxChoose]:=TRUE;
						IF NOT  fbEasyPumps[i].xQBusy THEN
								EXIT;
						ELSIF  i =12 THEN
								 station.iStepAuto:= 140;
					  END_IF
		 END_FOR
		
	140://注液结束
					arTonDelay[02](IN:=FALSE );
					 IF   	fbEasyPumps[1].xQDone AND
									fbEasyPumps[2].xQDone AND
									fbEasyPumps[3].xQDone AND
								  fbEasyPumps[4].xQDone AND
									fbEasyPumps[5].xQDone AND
									fbEasyPumps[6].xQDone AND
									fbEasyPumps[7].xQDone AND
								  fbEasyPumps[8].xQDone AND
									fbEasyPumps[9].xQDone AND
									fbEasyPumps[10].xQDone AND
									fbEasyPumps[11].xQDone AND
								  fbEasyPumps[12].xQDone THEN						
								 station.iStepAuto:=145;	
					 END_IF
	145://注液完成
		tsModuleProcess[bXCounter+1].xProcessCompleted:=TRUE;
		 station.iStepAuto:=150;	
	150://写入结果
				arProcessDataStation[bXCounter].xMaterialOnOff:=TRUE;
				arProcessDataStation[bXCounter].stProduct.xlidInjecting_OK:=TRUE;
				arProcessDataStation[bXCounter].stProduct.xlidInjecting_NOK:=FALSE;	
			 tsModuleProcess[bXCounter].xQDataCompleted:=TRUE;
			 station.iStepAuto:=160;
	155://注液失败
				arProcessDataStation[bXCounter].xMaterialOnOff:=TRUE;
				arProcessDataStation[bXCounter].stProduct.xlidInjecting_OK:=FALSE;
				arProcessDataStation[bXCounter].stProduct.xlidInjecting_NOK:=TRUE;	
				station.iStepAuto:=160;
	160://Z轴上升
		  fbZAxisMove.xMoveAuto[1]:=TRUE;
		IF  fbZAxisMove.xMoveInPos[1] THEN
			station.iStepAuto:=170;
		END_IF
	170://防滴漏气缸收回
		fbROTCyl.xAuto:=FALSE;
		IF fbROTCyl.xHP_Delay THEN
			station.iStepAuto:=180;	
		END_IF
	180://循环+1
		 	bXCounter:=bXCounter +1 ;
			station.iStepAuto:=190;
	190://检查循环次数
			IF   bXCounter<=2 THEN
				station.iStepAuto:=50;
			ELSE
				station.iStepAuto:=200;
			END_IF
	200://水平调整气缸收回
			IF  iBoxChoose =1 THEN
			(*上层水平调整气缸*)
			fbHOZAdjustCyl_1.xAuto :=FALSE;
		//	fbHOZAdjustCyl_2.xAuto :=FALSE;
			IF  fbHOZAdjustCyl_1.xHP_Delay THEN  // AND fbHOZAdjustCyl_2.xHP_Delay  THEN
					station.iStepAuto:= 210;
			END_IF
		ELSIF  iBoxChoose= 2 THEN
			(*下层水平调整气缸*)
			fbHOZAdjustCyl_3.xAuto :=FALSE;
		//	fbHOZAdjustCyl_4.xAuto :=FALSE;
			IF  fbHOZAdjustCyl_3.xHP_Delay  THEN // AND fbHOZAdjustCyl_4.xHP_Delay  THEN
					station.iStepAuto:= 210;
			END_IF
		END_IF
	210:////产品流程结束	
		station.iStepAuto:= 220;
		
	220://Restore_after_Estop_Process4 数据传输 
			IF  station.xSingleRunning THEN // OR fbMachine[1].xTryRun THEN
					station.iStepAuto :=998; 
			ELSIF tsModuleProcess[4].xProcessNotStarted AND NOT  tsModuleProcess[4].xProcessStarted THEN
					station.iStepAuto :=550; (*process not started*)
			ELSIF  tsModuleProcess[4].xProcessStarted AND NOT  tsModuleProcess[4].xProcessCompleted THEN
				 station.iStepAuto :=550 ;(*process started*)
			ELSIF  tsModuleProcess[4].xProcessCompleted AND NOT tsModuleProcess[4].xQDataCompleted  THEN
					station.iStepAuto :=560  ;(*process completed*)
			ELSIF tsModuleProcess[4].xQDataCompleted THEN
					station.iStepAuto :=999;(*Qdata completed *)
			ELSE
					station.iStepAuto :=550; 
			END_IF
	550://数据unload
			tsModuleProcess[4].xProcessNotStarted :=TRUE;
			tsModuleProcess[4].xProcessStarted :=TRUE;
			MEMCPY(ADR(arMainlineFixtureData[arCurFixtureNumStation[3]]),ADR(arProcessDataStation[1]),SIZEOF(arProcessDataStation[1]));
			MEMCPY(ADR(arMainlineFixtureData[arCurFixtureNumStation[4]]),ADR(arProcessDataStation[2]),SIZEOF(arProcessDataStation[2]));
			station.iStepAuto:= 560;
		
	560:
			tsModuleProcess[4].xProcessCompleted :=TRUE;
			station.iStepAuto:= 570;
 	570://本地数据清除
			//MEMSET(ADR(arProcessDataStation[1]),0,SIZEOF(arProcessDataStation[1]));
			//MEMSET(ADR(arProcessDataStation[2]),0,SIZEOF(arProcessDataStation[2]));
			tsModuleProcess[4].xQDataCompleted:=TRUE;
			arManualNOKHmiButton[2]:=FALSE;
			station.iStepAuto:= 998;
		
	998://----Single Run Finish----
		station.iStepAuto :=999;
		IF NOT station.xSingleContinuousRun THEN
			station.xSingleRunFlag:=FALSE;
		END_IF
		station.xCycleEnable:=FALSE;	
		station.xDone:=TRUE;
		
	999://XY伺服回参考位置
			fbXAxisMove.xMoveAuto[1]:=TRUE;
			fbYAxisMove.xMoveAuto[1]:=TRUE;
			IF fbXAxisMove.xMoveInPos[1]  AND fbYAxisMove.xMoveInPos[1]  THEN
				station.iStepAuto:=0;	
			END_IF
	{region "蠕动泵校准程序"}
	1000://切换窗口
			stCalibration.xWindowsTrigger:=TRUE;
			iCalibStep:=station.iStepAuto;
			station.iStepAuto:=1010;
	1010://等待人工安装好校准工装,
		 stCalibration.strCalibHmi:='Please Load Calibration Tool and then press Start Button ';
		IF    stCalibration.xStartButtonHmi THEN
			station.iStepAuto:=1020;
		END_IF
			 	iCalibStep:=station.iStepAuto;
	1020://开始循环
		 	FOR i:=1 TO 12 BY 1 DO
				 IF 	NOT arxRudongPumpCalibBypass[i] THEN
						 stCalibration.iYCounter:=i;
						 EXIT;
				 END_IF
			END_FOR
			stCalibration.iXCounter:=1;
			//stCalibration.iYCounter:=1;
			iCalibStep:=station.iStepAuto;
			station.iStepAuto:=1030;
		{region "初始化开始"}	
	1030://初始化蠕动泵
			stCalibration.strCalibHmi:='All RuDongPump is initing，please Wait it';
			station.iStepAuto:=station.iStepAuto +1;
			iCalibStep:=station.iStepAuto;
	1031://蠕动泵初始化开始
				 FOR i:=1 TO  12 BY 1 DO
						fbEasyPumps[i].stDeviceOpe.xStop_auto:=TRUE;
						IF	NOT fbEasyPumps[i].xQBusy  THEN
								EXIT;
						ELSIF   i =12 THEN
									iCalibStep:=station.iStepAuto;
									station.iStepAuto:=station.iStepAuto +1;		
					 	END_IF						
				 END_FOR
	1032://蠕动泵停
					iCalibStep:=station.iStepAuto;
					IF   fbEasyPumps[1].xQDone AND 
							 fbEasyPumps[2].xQDone AND 
							 fbEasyPumps[3].xQDone AND 
							 fbEasyPumps[4].xQDone AND 
							 fbEasyPumps[5].xQDone AND 
							 fbEasyPumps[6].xQDone AND 
							 fbEasyPumps[7].xQDone AND 
							 fbEasyPumps[8].xQDone AND 
							 fbEasyPumps[9].xQDone AND 
							 fbEasyPumps[10].xQDone AND 
							 fbEasyPumps[11].xQDone AND
							 fbEasyPumps[12].xQDone THEN
							station.iStepAuto:=station.iStepAuto +1;
					END_IF
	1033://初始化称
					fbMCk.xIReset:=TRUE;
					iCalibStep:=station.iStepAuto;
				 station.iStepAuto:=station.iStepAuto +1;
	1034://等待初始化完成
					iCalibStep:=station.iStepAuto;
					IF fbMCk.xQRdyCmd THEN
						station.iStepAuto:=station.iStepAuto +1;
					END_IF
	1035://停止称的检测
					fbMCk.stDeviceOpe.xAcquireWeight_Stop_HMI:=TRUE;
					iCalibStep:=station.iStepAuto;
					station.iStepAuto:=station.iStepAuto +1;
	1036://等待完成
					IF fbMCk.xQRdyCmd THEN
							station.iStepAuto:=station.iStepAuto +1;
					END_IF	
						 	iCalibStep:=station.iStepAuto;
	1037://称清零
				iCalibStep:=station.iStepAuto;
				fbMCk.stDeviceOpe.xClearZeroInstanly_HMI:=TRUE;
				IF  fbMCK.xQBusy THEN
							station.iStepAuto:=station.iStepAuto +1;	
				END_IF
	1038://等待清零结束
				IF	fbMCk.xQDone THEN
						station.iStepAuto:=1040;
				END_IF		
					iCalibStep:=station.iStepAuto;	
{endregion}
	
{region "蠕动泵校准程序开始"}
	1040://计算XY轴移动目标位置
			stCalibration.strCalibHmi:='X\Y AXis move to Target Position，please Wait it';
			///机构还未调整好暂时屏蔽移动功能,后续开放出来
			stData.Axis[3].rMovePosition[6]:=fbXAxisMove.rMovePosition[4];//+(stCalibration.iXCounter -1)*9.0;
			stData.Axis[4].rMovePosition[6]:=fbYAxisMove.rMovePosition[4];//+(stCalibration.iYCounter -1)*9.0;
			iCalibStep:=station.iStepAuto;
			station.iStepAuto:=1045;
	1045://XY轴移动到位
				fbXAxisMove.xMoveAuto[6]:=TRUE;
				fbYAxisMove.xMoveAuto[6]:=TRUE;
			IF  fbXAxisMove.xMoveInPos[6]  AND fbYAxisMove.xMoveInPos[6] THEN
				station.iStepAuto:=1050;
			END_IF
			iCalibStep:=station.iStepAuto;
	1050://打开防滴液气缸
				fbROTCyl.xAuto:=TRUE;
				IF fbROTCyl.xWP_Delay THEN
					station.iStepAuto:=1060;	
				END_IF
				iCalibStep:=station.iStepAuto;
	1060://Z轴去校准位置
				fbZAxisMove.xMoveAuto[3]:=TRUE;
				IF  fbZAxisMove.xMoveInPos[3] THEN
					station.iStepAuto:=1069;
				END_IF
				iCalibStep:=station.iStepAuto;
							
	1069://注液次数设定
				 _InjectCounuter :=1 ;
				iCalibStep:=station.iStepAuto;				
				 station.iStepAuto:=station.iStepAuto +1 ;
	1070:
				stCalibration.strCalibHmi:='Auto Calibration is Running，please Wait it';
				iCalibStep:=station.iStepAuto;
				station.iStepAuto:=station.iStepAuto +1 ;	
				
	1071://等待校准就绪
				IF fbMCK.xQRdyCmd AND  fbEasyPumps[stCalibration.iYCounter].xQRdyCmd THEN 
						station.iStepAuto:=station.iStepAuto +1 ;	
				END_IF		
				iCalibStep:=station.iStepAuto;
	1072://秤体清零	
				fbMCK.stDeviceOpe.xClearZeroInstanly_Auto:=TRUE;
				IF  fbMCK.xQBusy THEN
						station.iStepAuto:=station.iStepAuto +1 ;		 
				END_IF
				iCalibStep:=station.iStepAuto;
				
	1073://清零完成
				IF fbMCK.xQDone THEN
				 		//stCalibration.rMckVolume:=fbMCK.stParOut.rCurrentWeight;
					 arrMckDisplay[_InjectCounuter]:=fbMCK.stParOut.rCurrentWeight;
					 stCalibration.rMckVolume:=fbMCK.stParOut.rCurrentWeight;
					iCalibStep:=station.iStepAuto;
					station.iStepAuto:=station.iStepAuto +1 ;		
				END_IF
	1074://等待稳定时间
				 tSteadyTimer(IN:=TRUE,PT:=T#1S);
				 IF tSteadyTimer.Q THEN
					 tSteadyTimer(IN:=FALSE);
					 station.iStepAuto:=1077;	
				 END_IF	
					iCalibStep:=station.iStepAuto;
	1077://蠕动泵校准地址
				stData.EasyPumps[stCalibration.iYCounter].iModuleAdress:=stCalibration.iXCounter;
				stCalibration.rRudongPumpVolume:= stData.EasyPumps[stCalibration.iYCounter].rCalFluVolume;;														
				stCalibration.iInjectCounter :=3;//默认注液次数
				 //密度计算公式，ρ＝m/V 
					IF stCalibration.iType=1 THEN
						stCalibration.rDensity:=1;
					ELSIF stCalibration.iType=2 THEN
						stCalibration.rDensity:=0.8;
					END_IF
					iCalibStep:=station.iStepAuto;
					station.iStepAuto:=station.iStepAuto +1 ;		
	1078://启动单通道注液
				iCalibStep:=station.iStepAuto;
				fbEasyPumps[stCalibration.iYCounter].stDeviceOpe.xModulePush_Auto:=TRUE;
				IF	fbEasyPumps[stCalibration.iYCounter].xQBusy  THEN
						 tSteadyTimer(IN:=FALSE);
						 station.iStepAuto:=station.iStepAuto +1 ;	
				END_IF
				
	1079://等待稳定时间
				iCalibStep:=station.iStepAuto;
				IF    fbEasyPumps[stCalibration.iYCounter].xQDone THEN
							 tSteadyTimer(IN:=TRUE,PT:=T#500MS);
							 IF tSteadyTimer.Q THEN
									 tSteadyTimer(IN:=FALSE);
									 station.iStepAuto:=station.iStepAuto +1 ;	
							 END_IF
				END_IF
	1080://获取称重稳态结果
					iCalibStep:=station.iStepAuto;
					fbMCK.stDeviceOpe.xAcquireWeight_Steady_Auto:=TRUE;
					IF  fbMCK.xQBusy THEN
						station.iStepAuto:=station.iStepAuto +1 ;	
					END_IF
					
	1081://等待完成
					 iCalibStep:=station.iStepAuto;
					 IF fbMCK.xQDone THEN
							 station.iStepAuto:=1084 ;	
					 END_IF	
	1084://获取称重结果
					iCalibStep:=station.iStepAuto;
					arrMckDisplay[_InjectCounuter]:=fbMCK.stParOut.rCurrentWeight/stCalibration.rDensity;
					station.iStepAuto:=station.iStepAuto +1 ;
					
	1085://判断是否相差太多
					iCalibStep:=station.iStepAuto;
					IF 	ABS (stCalibration.rRudongPumpVolume - arrMckDisplay[_InjectCounuter])>0.5*stCalibration.rRudongPumpVolume THEN
								station.iStepAuto:=1070 ;
					ELSE
							 station.iStepAuto:=station.iStepAuto +1 ;
					END_IF
					

	1086://检查蠕动泵注液次数
				iCalibStep:=station.iStepAuto;	
				IF   _InjectCounuter >= stCalibration.iInjectCounter THEN
				 			 _InjectCounuter:=1;
							 stCalibration.rMckVolume:=0.0;
							 station.iStepAuto:=station.iStepAuto +1 ;
							
				ELSE
							_InjectCounuter:=_InjectCounuter +1;
				 			station.iStepAuto:=1070;
				END_IF
				
	1087://三次注液后算出平均实际液量
				FOR  i:= 1 TO stCalibration.iInjectCounter BY 1 DO
				 		stCalibration.rMckVolume:= stCalibration.rMckVolume + arrMckDisplay[i];
				END_FOR
				stCalibration.rMckVolume:=stCalibration.rMckVolume/stCalibration.iInjectCounter;
				stData.EasyPumps[stCalibration.iYCounter].rModuleRealFluVolume:=stCalibration.rMckVolume;
				iCalibStep:=station.iStepAuto;
				station.iStepAuto:=station.iStepAuto +1 ;	
	1088://写入通道实际液量
				iCalibStep:=station.iStepAuto;
				fbEasyPumps[stCalibration.iYCounter].stDeviceOpe.xCalibParaWrite_Auto:=TRUE;
				IF 	fbEasyPumps[stCalibration.iYCounter].xQBusy THEN
						station.iStepAuto:=station.iStepAuto +1 ;	
				END_IF
	1089://写入完成
					iCalibStep:=station.iStepAuto;
				 	IF 	fbEasyPumps[stCalibration.iYCounter].xQDone THEN
						station.iStepAuto:=station.iStepAuto +1 ;	
					END_IF
	1090://开始校准
				iCalibStep:=station.iStepAuto;
				fbEasyPumps[stCalibration.iYCounter].stDeviceOpe.xCalibration_Auto:=TRUE;
				IF 	fbEasyPumps[stCalibration.iYCounter].xQBusy THEN
						station.iStepAuto:=station.iStepAuto +1 ;	
				END_IF				
	1091://等待校准结束
				iCalibStep:=station.iStepAuto;
				IF NOT 	fbEasyPumps[stCalibration.iYCounter].xQBusy  THEN
					  IF NOT fbEasyPumps[stCalibration.iYCounter].xQDone   THEN
										 //校准了但是需要重新测试下
										 station.iStepAuto:=1040 ;		
						ELSE
									   station.iStepAuto:=station.iStepAuto +1;	
						END_IF
				END_IF			
	1092://Z轴回参考点
		//	fbZAxisMove.xMoveAuto[1]:=TRUE;
		//	IF   fbZAxisMove.xMoveInPos[1] THEN
			 		iCalibStep:=station.iStepAuto;
					 station.iStepAuto:=1095;
		//	END_IF
	1095://校准完成,移动到下一个位置
			stCalibration.iXCounter:=stCalibration.iXCounter +1;
			iCalibStep:=station.iStepAuto;
			station.iStepAuto:=1100;		
	1100://判断X轴循环 
			IF    stCalibration.iXCounter>8 THEN
						 IF stCalibration.iYCounter <12 THEN
									 FOR i:= (stCalibration.iYCounter+1) TO 12 BY 1 DO
													IF  NOT  arxRudongPumpCalibBypass[i] THEN
																stCalibration.iYCounter:= i;
																EXIT;
													END_IF
									 END_FOR
						 ELSIF stCalibration.iYCounter >=12 THEN
										stCalibration.iYCounter:=stCalibration.iYCounter+1;
						 END_IF
							stCalibration.iXCounter:=1;
							 station.iStepAuto:=1110;
			ELSE
					 station.iStepAuto:=1035;
			END_IF
			iCalibStep:=station.iStepAuto;
	1110://判断Y轴循环
			IF   stCalibration.iYCounter >12 THEN
					 stCalibration.iYCounter:=1;
					 stCalibration.iXCounter:=1;
					 station.iStepAuto:=1130;
			ELSE
					station.iStepAuto:=1120;
			END_IF
			iCalibStep:=station.iStepAuto;
	1120://等待下一组按钮按下
			stCalibration.strCalibHmi:='Wait Press Next Button HMI';
			IF stCalibration.xNextButtonHmi THEN
				station.iStepAuto:=1040;
			END_IF
			iCalibStep:=station.iStepAuto;
			
	1130://校准完成
			stCalibration.strCalibHmi:='Calibration Completed，wait press Completed button HMI';
			IF  stCalibration.xCompletedButtonHmi THEN
					 stCalibration.xNeedCalibration:=FALSE;	
					 station.iStepAuto:=1140;
			END_IF
			iCalibStep:=station.iStepAuto;
	1140://再按一次完成按钮关闭当前窗口
			stCalibration.strCalibHmi:='Close Current windows，wait press Completed button HMI';
			IF  stCalibration.xCompletedButtonHmi THEN
					 stCalibration.xWindowsTrigger:=FALSE;
					 station.iStepAuto:=1200;
			END_IF	
			iCalibStep:=station.iStepAuto;
	1200:///校准完成，请将工位初始化
		 iCalibStep:=station.iStepAuto;
			stCalibration.strCalibHmi:='Calibration Completed，Init station Now Please';
	1300://校准报错，请将工位初始化后继续
		 	 iCalibStep:=station.iStepAuto;
			 stCalibration.strCalibHmi:='Calibration Aborted，Init station Now Please';	 
	{endregion}		
	{region "清料程序"}	 
	2000://写入数据
		 	arProcessDataStation[1].xMaterialOnOff:=FALSE;
			arProcessDataStation[1].stProduct.xlidInjecting_OK:=FALSE;
			arProcessDataStation[1].stProduct.xlidInjecting_NOK:=FALSE;	
			arProcessDataStation[2].xMaterialOnOff:=FALSE;
			arProcessDataStation[2].stProduct.xlidInjecting_OK:=FALSE;
			arProcessDataStation[2].stProduct.xlidInjecting_NOK:=FALSE;	
			arProcessDataStation[1].stProduct.xEmptying:=TRUE;
			arProcessDataStation[2].stProduct.xEmptying:=TRUE;	
		 	MEMCPY(ADR(arMainlineFixtureData[arCurFixtureNumStation[3]]),ADR(arProcessDataStation[1]),SIZEOF(arProcessDataStation[1]));
			MEMCPY(ADR(arMainlineFixtureData[arCurFixtureNumStation[4]]),ADR(arProcessDataStation[2]),SIZEOF(arProcessDataStation[2]));
		 	station.iStepAuto:=2010;
	2010://允许主流线前进
		 			station.xDone:=TRUE;
				  station.iStepAuto:=2020;
  2020://停止蠕动泵
				FOR i:=1 TO gc_uiRudongPump BY 1 DO
					fbRudongPump[i].stDeviceOpe.xStop_Auto:=TRUE;
				END_FOR
		   	station.iStepAuto :=2030;
	2030://等待蠕动泵全部停止
			 FOR i:=1 TO gc_uiRudongPump BY 1 DO
				 IF  NOT  fbRudongPump[i].xDone  THEN
						 EXIT;
				 ELSE  
					 fbRudongPump[i].xExecute:=FALSE;
				 END_IF
				 IF  i = gc_uiRudongPump THEN
						 station.iStepAuto :=2040;
				 END_IF
			 END_FOR
	2040://激活配置
			 FOR i:=1 TO gc_uiRudongPump BY 1 DO
					 fbRudongPump[i].xNeedConfigurePara:=TRUE;
			 END_FOR
				 station.iStepAuto :=2050;
	2050://XYZ轴回参考位
				fbXAxisMove.xMoveAuto[1]:=TRUE;
				fbYAxisMove.xMoveAuto[1]:=TRUE;
				IF fbXAxisMove.xMoveInPos[1]  AND
				   fbYAxisMove.xMoveInPos[1]  THEN
					station.iStepAuto:=2100;	
				END_IF
	2100://当站清料完成
		 		station.xEmptying:=FALSE;
				station.xEmptyDone:=TRUE;
			  station.iStepAuto:=0;			 
	{endregion}
		 
		 
	ELSE
		;	
END_CASE
END_IF
{region "蠕动泵校准报警处理"}
//超时报警
	tCalibrationTimeOut(IN:= (iCalibStep = station.iStepAuto) AND iCalibStep >=1020 AND   iCalibStep <1120 , PT:=T#10S , Q=> , ET=> );
	//报警状态
		IF  fbMCK.xQError OR fbEasyPumps[stCalibration.iYCounter].xQError OR   tCalibrationTimeOut.Q THEN
					stCalibration.xError:=TRUE;		
					MEMSET(ADR(fbEasyPumps[stCalibration.iYCounter].stDeviceOpe),0,SIZEOF(fbEasyPumps[stCalibration.iYCounter].stDeviceOpe));
			 		MEMSET(ADR(fbMCK.stDeviceOpe),0,SIZEOF(fbMCK.stDeviceOpe));
					IF   stCalibration.xReset THEN
							fbMCK.xIReset:=TRUE;
							fbEasyPumps[stCalibration.iYCounter].xIReset:=TRUE;	 
							station.iStepAuto:=1300;
							stCalibration.xWindowsTrigger:=FALSE;
							iCalibStep:=0; 
					END_IF
		ELSE
					stCalibration.xError:=FALSE;		
		END_IF
//区分报警
	IF fbMCK.xQError THEN
				stCalibration.strCalibHmi:='Balance Error,Please check it';		
	ELSIF  fbRuDongPump[stCalibration.iYCounter].xError THEN
				stCalibration.strCalibHmi:='RudongPump Error,Please check it';	 
  ELSIF tCalibrationTimeOut.Q THEN
				stCalibration.strCalibHmi:='Calibration Timeout,Please check it'; 
	END_IF						 
{endregion}
	
]]></ST>
      </Implementation>
    </Action>
    <Action Name="FlowInit" Id="{8e4e72d8-baa5-44fc-93c0-6a9330383516}">
      <Implementation>
        <ST><![CDATA[IF NOT station.xIniting THEN
  station.iStepInit:=0;    
ELSE
//--------------------------------------------初始化步序----------------------------------
CASE station.iStepInit OF	
 0://  
 		iRudongPumpEmptyStep:=0;//复位排空流程
  	IF station.xIniting THEN	
  	  station.iStepInit:=10;	
  	END_IF	
10://复位数据
	FOR   i:=1 TO 12 BY 1	DO
	 	fbRudongPump[i].xExecute:=FALSE;
	END_FOR
	fbMCK.xIReset:=TRUE;
	FOR i:=1 TO gc_ModuleProNo BY 1 DO
				MEMSET(ADR(tsModuleProcess[i]),0,SIZEOF(tsModuleProcess[i]));
	END_FOR
	station.iStepInit :=15;
15://伺服上电
  	fbXAxisMove.xPowerInit := TRUE ;
	 fbYAxisMove.xPowerInit := TRUE ;
	 fbZAxisMove.xPowerInit := TRUE ;
	IF fbXAxisMove.xPowerOn AND   fbYAxisMove.xPowerOn AND  fbZAxisMove.xPowerOn THEN 
    	station.iStepInit:=20;	
	END_IF	
20://Z轴伺服上升
		fbZAxisMove.xMoveAuto[1]:=TRUE;
		IF fbZAxisMove.xMoveInPos[1]   THEN
			station.iStepInit:=30;	
		END_IF	
30://防滴液气缸回原
	fbROTCyl.xInit:=TRUE;
	IF fbROTCyl.xHP_Delay THEN
		station.iStepInit :=50;
	END_IF
35://停止蠕动泵
		FOR i:=1 TO gc_uiRudongPump BY 1 DO
				fbEasyPumps[i].stDeviceOpe.xStop_Auto:=TRUE;
				IF  NOT  fbEasyPumps[i].xQBusy THEN
				 		EXIT;
				ELSIF i =gc_uiRudongPump THEN
				 		station.iStepInit :=40;
				END_IF
		END_FOR
			
40://等待蠕动泵全部停止
				 IF   	fbEasyPumps[1].xQDone AND
									fbEasyPumps[2].xQDone AND
									fbEasyPumps[3].xQDone AND
								  fbEasyPumps[4].xQDone AND
									fbEasyPumps[5].xQDone AND
									fbEasyPumps[6].xQDone AND
									fbEasyPumps[7].xQDone AND
								  fbEasyPumps[8].xQDone AND
									fbEasyPumps[9].xQDone AND
									fbEasyPumps[10].xQDone AND
									fbEasyPumps[11].xQDone AND
								  fbEasyPumps[12].xQDone THEN						
								 station.iStepInit:=50;	
					 END_IF;
50://XY轴回参考位
		fbXAxisMove.xMoveAuto[1]:=TRUE;
		fbYAxisMove.xMoveAuto[1]:=TRUE;
		IF fbXAxisMove.xMoveInPos[1]  AND fbYAxisMove.xMoveInPos[1]  THEN
			station.iStepInit:=90;	
		END_IF

90://水平调整气缸收回
	fbHOZAdjustCyl_1.xInit :=TRUE;
   // fbHOZAdjustCyl_2.xInit :=TRUE;
    fbHOZAdjustCyl_3.xInit :=TRUE;
   // fbHOZAdjustCyl_4.xInit :=TRUE;
	IF  fbHOZAdjustCyl_1.xHP_Delay AND 
	//	fbHOZAdjustCyl_2.xHP_Delay AND
		fbHOZAdjustCyl_3.xHP_Delay THEN
	//	fbHOZAdjustCyl_4.xHP_Delay THEN
		station.iStepInit:=100;	
	END_IF
	
100:
		station.iStepInit:=999;	
999://初始化完成	
	station.iStepInit:=0;
	station.xInitDone:=TRUE;  
END_CASE
END_IF
]]></ST>
      </Implementation>
    </Action>
    <Action Name="General" Id="{d03e3148-1994-42d2-bdc9-63de34bf4faa}">
      <Implementation>
        <ST><![CDATA[{region "清除过程记录"}
CASE bClearProcessStep OF
	0:	
		IF	 S08_MainLine.xClearProcessStatus THEN
			FOR i:=1 TO gc_ModuleProNo BY 1 DO
				MEMSET(ADR(tsModuleProcess[i]),0,SIZEOF(tsModuleProcess[i]));
			END_FOR
			bClearProcessStep:=10;
		END_IF
	10:
		xClearModuleProcessDone:=TRUE;
		bClearProcessStep:=20;
	20:
		IF NOT S08_MainLine.xClearProcessStatus THEN
			xClearModuleProcessDone:=FALSE;
			bClearProcessStep:=30;
		END_IF
	30:  
			bClearProcessStep:=0;
END_CASE
	 
{endregion}
	 
{region "蠕动泵排空"}
RudongPump_R_TRIG[1](CLK:=xAllRudongPumpEmpty , Q=> );
RudongPump_R_TRIG[2](CLK:=xRudongPumpEmptyDone , Q=> );
//超时报警
	tEmptyTimeOut(IN:= (iRudongPumpEmptyOldStep =iRudongPumpEmptyStep AND iRudongPumpEmptyStep <>0) , PT:=T#10S , Q=> , ET=> );
	IF		tEmptyTimeOut.Q THEN
			iRudongPumpEmptyStep:=0;
				FOR i:=1 TO  12 BY 1 DO
							fbRudongPump[i].xExecute:=FALSE;
						fbRudongPump[i].stDeviceOpe.xFullSpeedPush_Hmi:=FALSE;
						fbRudongPump[i].stDeviceOpe.xFullSpeedStop_Hmi:=TRUE;	
				END_FOR
				station.adwAlarm[2].0	:=	TRUE	;//S02注液工位排空超时
	END_IF
CASE  iRudongPumpEmptyStep OF
		 0://等待触发信号
				 iRudongPumpEmptyOldStep :=iRudongPumpEmptyStep;
				 IF  RudongPump_R_TRIG[1].Q THEN
							iRudongPumpEmptyStep:= iRudongPumpEmptyStep +1;
				 END_IF
				
		 1://XY轴到排液位置
							iRudongPumpEmptyOldStep :=iRudongPumpEmptyStep;		
						 fbXAxisMove.xMoveAuto[5]:=TRUE;
						 fbYAxisMove.xMoveAuto[5]:=TRUE;
					 IF  fbXAxisMove.xMoveInPos[5]  AND fbYAxisMove.xMoveInPos[5] THEN
							iRudongPumpEmptyStep:= iRudongPumpEmptyStep +1;
					 END_IF		 
					  
		 2://防滴液气缸打开
						 	iRudongPumpEmptyOldStep :=iRudongPumpEmptyStep;
						 fbROTCyl.xAuto:=TRUE;
						 IF fbROTCyl.xWP_Delay THEN
								 iRudongPumpEmptyStep:= iRudongPumpEmptyStep +1;
						 END_IF
						 
		 3://Z轴去校准位置
						iRudongPumpEmptyOldStep :=iRudongPumpEmptyStep;
						 fbZAxisMove.xMoveAuto[4]:=TRUE;
						 IF  fbZAxisMove.xMoveInPos[4] THEN
							 iRudongPumpEmptyStep:= iRudongPumpEmptyStep +1;
						 END_IF
						
		 4://开始排空液体
						FOR i:=1 TO  12 BY 1 DO
							  IF   NOT  arxRudongPumpEmptyBypass[i] THEN
										fbRudongPump[i].stDeviceOpe.xFullSpeedPush_Hmi:=TRUE;
								END_IF
					 END_FOR
						iRudongPumpEmptyOldStep :=iRudongPumpEmptyStep;	
					 iRudongPumpEmptyStep:= iRudongPumpEmptyStep +1;		
						
		 5://等待结束
				 IF	RudongPump_R_TRIG[2].Q THEN
						 FOR i:=1 TO  12 BY 1 DO
									 fbRudongPump[i].stDeviceOpe.xFullSpeedStop_Hmi:=TRUE;				
						 END_FOR		
								iRudongPumpEmptyStep:= iRudongPumpEmptyStep +1;		
				 END_IF	
				 //	iRudongPumpEmptyOldStep :=iRudongPumpEmptyStep;
		 6://结束
							 iRudongPumpEmptyOldStep :=iRudongPumpEmptyStep;
							 iRudongPumpEmptyStep:= 0;
END_CASE	
{endregion}
{region "手动校准蠕动泵"}
IF  stManualCalib.xReset THEN
			  stManualCalib.xError:=FALSE;
			  stManualCalib.iOldMCalibStep:=0;
			  stManualCalib.iMCalibStep:=0;
			  stManualCalib.xBusy  :=FALSE;
			  stManualCalib.xDone :=FALSE;	  	 
			fbEasyPumps[stManualCalib.iPumpContorller].xIReset:=TRUE;
			fbMCK.xIReset:=TRUE;
END_IF
IF  NOT  stManualCalib.xBusy THEN
 		stManualCalib.xRdyCmd:=TRUE;
ELSE
 		stManualCalib.xRdyCmd:=FALSE;	
END_IF
tMCalibTimeOut(IN:= (stManualCalib.iMCalibStep =stManualCalib.iOldMCalibStep) AND stManualCalib.iMCalibStep<>0 , PT:= T#25S, Q=> , ET=> );
IF		tMCalibTimeOut.Q THEN
 	stManualCalib.xError:=TRUE;
	stManualCalib.iMCalibStep:=0;
END_IF
CASE stManualCalib.iMCalibStep OF
 0://等待按键
		IF  stManualCalib.xStart  AND
			  stManualCalib.iPumpContorller>=1 AND 
				stManualCalib.iPumpContorller<=12 AND 
				stManualCalib.iPumpModule>=1 AND 
				stManualCalib.iPumpModule<=9 THEN
			  stManualCalib.xModulePushStart:=FALSE;		 
				stManualCalib.xModulePushOK:=FALSE;			
				stManualCalib.xCalibTestStart:=FALSE;				 
				stManualCalib.xCalibTestOK:=FALSE;						
				stManualCalib.xRecordDataStart:=FALSE;	
				stManualCalib.xRecordDataOK:=FALSE;						 
				stManualCalib.xStart  :=FALSE;
				stManualCalib.xBusy  :=TRUE;
				stManualCalib.xDone :=FALSE;	 
				stManualCalib.iMCalibStep:=stManualCalib.iMCalibStep +1;
		 END_IF
1://参数赋值
	 	stManualCalib.iOldMCalibStep:=stManualCalib.iMCalibStep;
		stData.EasyPumps[stManualCalib.iPumpContorller].rCalFluVolume:=stManualCalib.rSetVolume;
		stData.EasyPumps[stManualCalib.iPumpContorller].iModuleAdress:=stManualCalib.iPumpModule;
		stData.EasyPumps[stManualCalib.iPumpContorller].rCalTime:=stManualCalib.rRunTime;
		stData.EasyPumps[stManualCalib.iPumpContorller].rCalNum:=stManualCalib.iCycleNum;
		stData.EasyPumps[stManualCalib.iPumpContorller].rModuleRealFluVolume:=stManualCalib.rAverageRealVolume;
		stManualCalib.iMCalibStep:=stManualCalib.iMCalibStep +1;
2://写入校准参数
	 	stManualCalib.iOldMCalibStep:=stManualCalib.iMCalibStep;
		stManualCalib.iMCalibStep:=stManualCalib.iMCalibStep +1;	
		
3://等待写入完成
	 	stManualCalib.iOldMCalibStep:=stManualCalib.iMCalibStep;
	  stManualCalib.xModulePushStart:=TRUE;
		stManualCalib.xModulePushOK:=FALSE;
		stManualCalib.iMCalibStep:=stManualCalib.iMCalibStep +1;	
4://清除原有数据
	 	stManualCalib.iOldMCalibStep:=stManualCalib.iMCalibStep;
	 	//IF  stManualCalib.xModulePushStart  THEN
			 MEMSET(ADR(stManualCalib.arrTestRealVolume[1]),0,SIZEOF(stManualCalib.arrTestRealVolume));
			 MEMSET(ADR(stManualCalib.arrRealVolume[1]),0,SIZEOF(stManualCalib.arrRealVolume));
				stManualCalib.rAverageRealVolume:=0; 
			 stManualCalib.iInjectCounter:=1;
		//ELSE
		//	 stManualCalib.iCalibCounter:=1;
		//END_IF
	 	stManualCalib.iMCalibStep:=stManualCalib.iMCalibStep +1;	
5://称清零
	 	stManualCalib.iOldMCalibStep:=stManualCalib.iMCalibStep;
	 IF   stManualCalib.xModulePushStart OR
				stManualCalib.xCalibTestStart  OR
				(stManualCalib.xRecordDataStart AND 
					stManualCalib.iRecordCounter=1) THEN
				 fbMCK.stDeviceOpe.xClearZeroInstanly_HMI:=TRUE;
				 IF fbMCK.xQBusy THEN
							 stManualCalib.iMCalibStep:=stManualCalib.iMCalibStep +1;	
					END_IF
	 ELSE
			 stManualCalib.iMCalibStep:=stManualCalib.iMCalibStep +2;	
	 END_IF
6://等待清零完成
	 	stManualCalib.iOldMCalibStep:=stManualCalib.iMCalibStep;
	  IF  fbMCK.xQDone THEN
			  	stManualCalib.iMCalibStep:=stManualCalib.iMCalibStep +1;
		 ELSIF  fbMCK.xQError THEN
				  fbMCK.xIReset:=TRUE;
					stManualCalib.iMCalibStep:=5;	
		 END_IF
7://开始单通道注液
	 	stManualCalib.iOldMCalibStep:=stManualCalib.iMCalibStep;
	  fbEasyPumps[stManualCalib.iPumpContorller].stDeviceOpe.xModulePush_Auto:=TRUE;
		IF  fbEasyPumps[stManualCalib.iPumpContorller].xQBusy THEN
				stManualCalib.iMCalibStep:=stManualCalib.iMCalibStep +1;	
		END_IF
8://等待注液完成
	 	stManualCalib.iOldMCalibStep:=stManualCalib.iMCalibStep;
	 	stManualCalib.tStableDelay(IN:= FALSE);
	 	IF  fbEasyPumps[stManualCalib.iPumpContorller].xQDone THEN
				stManualCalib.iMCalibStep:=stManualCalib.iMCalibStep +1;	
		END_IF
9://等待
	 stManualCalib.tStableDelay(IN:= TRUE, PT:=T#10S , Q=> , ET=> );
	 IF  stManualCalib.tStableDelay.Q THEN
			 		stManualCalib.tStableDelay(IN:= FALSE);
					stManualCalib.iMCalibStep:=stManualCalib.iMCalibStep +1;	
	 END_IF
10://读取称的读数
	 	stManualCalib.iOldMCalibStep:=stManualCalib.iMCalibStep;
	 	fbMCK.stDeviceOpe.xAcquireWeight_RealTime_HMI:=TRUE;
		IF fbMCK.xQBusy THEN
					stManualCalib.iMCalibStep:=stManualCalib.iMCalibStep +1;	
		END_IF
11://等待完成
	 	stManualCalib.iOldMCalibStep:=stManualCalib.iMCalibStep;
	  IF  fbMCK.xQDone THEN
				IF  ((stManualCalib.xModulePushStart OR stManualCalib.xCalibTestStart OR
								(stManualCalib.xRecordDataStart AND stManualCalib.iRecordCounter =1 )) AND
							 fbMCK.stParOut.rCurrentWeight <=stManualCalib.rSetVolume*0.1)  OR 
						 (	stManualCalib.xRecordDataStart  AND 
							stManualCalib.iRecordCounter >1 AND  fbMCK.stParOut.rCurrentWeight < 
							stManualCalib.arrTestRealVolume[stManualCalib.iRecordCounter-1]+ stManualCalib.rSetVolume*0.5)  THEN
										stManualCalib.iMCalibStep:=5;
				ELSE
							IF  stManualCalib.xModulePushStart THEN
									stManualCalib.arrRealVolume[stManualCalib.iInjectCounter]:=fbMCK.stParOut.rCurrentWeight;
							ELSIF  stManualCalib.xCalibTestStart THEN
									stManualCalib.arrTestRealVolume[stManualCalib.iCalibCounter]:=fbMCK.stParOut.rCurrentWeight;
							ELSIF  stManualCalib.xRecordDataStart THEN
									stManualCalib.arrTestRealVolume[stManualCalib.iRecordCounter]:=fbMCK.stParOut.rCurrentWeight;
							END_IF
			  			stManualCalib.iMCalibStep:=stManualCalib.iMCalibStep +1;	
					END_IF
		 ELSIF  fbMCK.xQError THEN
				  fbMCK.xIReset:=TRUE;
					 stManualCalib.iMCalibStep:=5;
		 END_IF
12://注液计数
	 	stManualCalib.iOldMCalibStep:=stManualCalib.iMCalibStep;
	 	IF  stManualCalib.xModulePushStart THEN
	  			stManualCalib.iInjectCounter := stManualCalib.iInjectCounter +1;
		ELSIF   stManualCalib.xCalibTestStart THEN
				 	stManualCalib.iCalibCounter := stManualCalib.iCalibCounter +1;
		ELSIF  stManualCalib.xRecordDataStart THEN
						stManualCalib.iRecordCounter := stManualCalib.iRecordCounter +1;
		END_IF
	 	stManualCalib.iMCalibStep:=stManualCalib.iMCalibStep +1;	
13://
	 	stManualCalib.iOldMCalibStep:=stManualCalib.iMCalibStep;
	 	IF   stManualCalib.xModulePushStart THEN
				IF 	 stManualCalib.iInjectCounter >3 THEN
							stManualCalib.iMCalibStep:=stManualCalib.iMCalibStep +1;
				ELSE
							stManualCalib.iMCalibStep:=5;
				END_IF
		ELSIF   stManualCalib.xCalibTestStart THEN
				IF 	 stManualCalib.iCalibCounter >10 THEN
							stManualCalib.iMCalibStep:=stManualCalib.iMCalibStep +1;
				ELSE
							stManualCalib.iMCalibStep:=5;
				END_IF
		ELSIF   stManualCalib.xRecordDataStart THEN
				IF 	 stManualCalib.iRecordCounter >10 THEN
							stManualCalib.iMCalibStep:=stManualCalib.iMCalibStep +1;
				ELSE
							stManualCalib.iMCalibStep:=5;
				END_IF			 
		END_IF
			 
14://计算平均液量或者校准的精度
	 	stManualCalib.iOldMCalibStep:=stManualCalib.iMCalibStep;
		IF  stManualCalib.xModulePushStart THEN
						FOR i:=1 TO 3 BY 1 DO
									stManualCalib.rAverageRealVolume:=stManualCalib.rAverageRealVolume +stManualCalib.arrRealVolume[i];
						END_FOR
						 stManualCalib.rAverageRealVolume:=stManualCalib.rAverageRealVolume/3;
						 stManualCalib.xModulePushStart:=FALSE;
						 stManualCalib.xModulePushOK:=TRUE;
						 stManualCalib.iMCalibStep:=stManualCalib.iMCalibStep +1;
		 ELSIF  stManualCalib.xCalibTestStart THEN
						FOR i:=1 TO 8 BY 1 DO
									arrVolume[1]:=ABS(stManualCalib.arrTestRealVolume[i] -stManualCalib.rSetVolume);
									arrVolume[2]:=stManualCalib.rSetVolume*stData.EasyPumps[stManualCalib.iPumpContorller].iAccuracySet;
									 IF  arrVolume[1]>arrVolume[2] THEN
											stManualCalib.xCalibTestStart:=FALSE;
											stManualCalib.xCalibTestOK:=FALSE;
											stManualCalib.iMCalibStep:=1;
									 ELSIF i=8 THEN
											stManualCalib.xCalibTestStart:=FALSE;
											stManualCalib.xCalibTestOK:=TRUE;
											stManualCalib.xRecordDataStart:=TRUE;
											stManualCalib.xRecordDataOK:=FALSE;
											stManualCalib.iRecordCounter:=1;
											stManualCalib.iMCalibStep:=4;
									 END_IF
						END_FOR	
			ELSIF stManualCalib.xRecordDataStart THEN
						 stManualCalib.xRecordDataStart:=FALSE;
						 stManualCalib.xRecordDataOK:=TRUE;	
							stManualCalib.xBusy  :=FALSE;
							stManualCalib.xDone  :=TRUE;	 
						 	stManualCalib.iMCalibStep:=0;			
		  END_IF
15://写入校准参数
	 	stManualCalib.iOldMCalibStep:=stManualCalib.iMCalibStep;
		IF  stManualCalib.xModulePushOK AND NOT stManualCalib.xCalibTestStart AND NOT  stManualCalib.xRecordDataStart THEN
				stData.EasyPumps[stManualCalib.iPumpContorller].rModuleRealFluVolume:=stManualCalib.rAverageRealVolume;
				fbEasyPumps[stManualCalib.iPumpContorller].stDeviceOpe.xCalibParaWrite_Hmi:=TRUE;
				IF  fbEasyPumps[stManualCalib.iPumpContorller].xQBusy THEN
							stManualCalib.iMCalibStep:=stManualCalib.iMCalibStep +1;	
				END_IF
		ELSE
							stManualCalib.iMCalibStep:=stManualCalib.iMCalibStep +2;
		END_IF
16://等待写入完成
	 	stManualCalib.iOldMCalibStep:=stManualCalib.iMCalibStep;
	 	IF  fbEasyPumps[stManualCalib.iPumpContorller].xQDone THEN
				stManualCalib.xCalibTestStart:=TRUE;
				stManualCalib.iCalibCounter:=1;
					stManualCalib.iMCalibStep:=stManualCalib.iMCalibStep +1;	
		END_IF	
	
17://开始校准
	 	stManualCalib.iOldMCalibStep:=stManualCalib.iMCalibStep;
		fbEasyPumps[stManualCalib.iPumpContorller].stDeviceOpe.xCalibration_Auto:=TRUE;
		IF  fbEasyPumps[stManualCalib.iPumpContorller].xQBusy THEN
				stManualCalib.iMCalibStep:=stManualCalib.iMCalibStep +1;	
		END_IF
18://等待写入完成
	 	stManualCalib.iOldMCalibStep:=stManualCalib.iMCalibStep;
	 	IF  fbEasyPumps[stManualCalib.iPumpContorller].xQDone THEN
				stManualCalib.iMCalibStep:=stManualCalib.iMCalibStep +1;	
		END_IF
19://校准结束,开始测试校准效果
			stManualCalib.iMCalibStep:=5;	 
 
END_CASE
{endregion}
]]></ST>
      </Implementation>
    </Action>
    <Action Name="ILC" Id="{ee8acce8-8d32-4f66-8513-5ca456ae67c2}">
      <Implementation>
        <ST><![CDATA[
//---------------------------------------------------工站可执行-------------------------------------------------------
station.xCanRun :=TRUE ;

//---------------------------------------------------气缸动作条件-------------------------------------------
fbHOZAdjustCyl_1.xOffILC	:=	TRUE	;
fbHOZAdjustCyl_1.xOnILC	:=	TRUE	;
//fbHOZAdjustCyl_2.xOffILC	:=	TRUE	;
//fbHOZAdjustCyl_2.xOnILC	:=	TRUE	;
fbHOZAdjustCyl_3.xOffILC	:=	TRUE	;
fbHOZAdjustCyl_3.xOnILC	:=	TRUE	;
//fbHOZAdjustCyl_4.xOffILC	:=	TRUE	;
//fbHOZAdjustCyl_4.xOnILC	:=	TRUE	;
fbROTCyl.xOffILC	:=	TRUE	;
fbROTCyl.xOnILC	:=	TRUE;

//---------------------------------------------------伺服动作条件-------------------------------------------
fbXAxisMove.xRunILC := 					
fbXAxisMove.xMoveILC[1] :=					
fbxAxisMove.xMoveILC[2] :=					
fbxAxisMove.xMoveILC[3] :=					
fbxAxisMove.xMoveILC[4] :=					
fbxAxisMove.xMoveILC[5] := 		fbROTCyl.xHP_Sensor ;
fbYAxisMove.xRunILC := 			
fbYAxisMove.xMoveILC[1] :=					
fbYAxisMove.xMoveILC[2] :=					
fbYAxisMove.xMoveILC[3] :=					
fbYAxisMove.xMoveILC[4] :=					
fbYAxisMove.xMoveILC[5] := 	fbROTCyl.xHP_Sensor		 ;
fbZAxisMove.xRunILC := 	 				
fbZAxisMove.xMoveILC[1] :=					
fbZAxisMove.xMoveILC[2] :=					
fbZAxisMove.xMoveILC[3] :=					
fbZAxisMove.xMoveILC[4] :=					
fbZAxisMove.xMoveILC[5] := 		fbROTCyl.xWP_Sensor		;
fbStirAxis.xRunILC := 					
fbStirAxis.xMoveILC[1] :=					
fbStirAxis.xMoveILC[2] :=					
fbStirAxis.xMoveILC[3] :=					
fbStirAxis.xMoveILC[4] :=					
fbStirAxis.xMoveILC[5] := 		TRUE			;
///蠕动泵
fbRudongPump[1].xDeviceRunning:=
fbRudongPump[2].xDeviceRunning:=
fbRudongPump[3].xDeviceRunning:=
fbRudongPump[4].xDeviceRunning:=
fbRudongPump[5].xDeviceRunning:=
fbRudongPump[6].xDeviceRunning:=
fbRudongPump[7].xDeviceRunning:=
fbRudongPump[8].xDeviceRunning:=
fbRudongPump[9].xDeviceRunning:=
fbRudongPump[10].xDeviceRunning:=
fbRudongPump[11].xDeviceRunning:=
fbRudongPump[12].xDeviceRunning:=station.xSingleRunning OR station.xRunning OR station.xIniting;
//称
fbMCK.xIDeviceRunning:=TRUE;

fbAutoCal.xDeviceRunning:=TRUE;]]></ST>
      </Implementation>
    </Action>
    <Action Name="TipAuto" Id="{889933b8-f42f-422c-ac8e-18312c628f99}">
      <Implementation>
        <ST><![CDATA[
//------------------------------------------------AutoTip Cylinder--------------------------------
station.adwAutoTip[1].00	:=	fbHOZAdjustCyl_1.xAutoTip	;
//station.adwAutoTip[1].01	:=	fbHOZAdjustCyl_2.xAutoTip	;
station.adwAutoTip[1].02	:=	fbHOZAdjustCyl_3.xAutoTip	;
//station.adwAutoTip[1].03	:=	fbHOZAdjustCyl_4.xAutoTip	;
station.adwAutoTip[1].04	:=	fbROTCyl.xAutoTip	;

//------------------------------------------------AutoTip Servo--------------------------------
//**************************************
FOR i:= 1 TO 5 BY 1 DO 
	IF fbXAxisMove.xMoveAuto[i] THEN
		fbXAxisMove.iPosNumber := i ;
	END_IF
	IF fbYAxisMove.xMoveAuto[i] THEN
		fbYAxisMove.iPosNumber := i ;
	END_IF
	IF fbZAxisMove.xMoveAuto[i] THEN
		fbZAxisMove.iPosNumber := i ;
	END_IF
	IF fbStirAxis.xMoveAuto[i] THEN
		fbStirAxis.iPosNumber := i ;
	END_IF
END_FOR


IF  fbMachine[1].xAutoMode AND NOT fbMachine[1].xRunning AND arTonDelay[7].Q  THEN
		IF fbXAxisMove.iPosNumber=1 AND NOT fbXAxisMove.xMoveInPos[1] THEN station.adwAutoTip[1].10:=TRUE; END_IF//轴伺服自动时位置不在位置1	
		IF fbXAxisMove.iPosNumber=2 AND NOT fbXAxisMove.xMoveInPos[2] THEN station.adwAutoTip[1].11:=TRUE; END_IF//轴伺服自动时位置不在位置2	
		IF fbXAxisMove.iPosNumber=3 AND NOT fbXAxisMove.xMoveInPos[3] THEN station.adwAutoTip[1].12:=TRUE; END_IF//轴伺服自动时位置不在位置3	
		IF fbXAxisMove.iPosNumber=4 AND NOT fbXAxisMove.xMoveInPos[4] THEN station.adwAutoTip[1].13:=TRUE; END_IF//轴伺服自动时位置不在位置4	
		IF fbXAxisMove.iPosNumber=5 AND NOT fbXAxisMove.xMoveInPos[5] THEN station.adwAutoTip[1].14:=TRUE; END_IF//轴伺服自动时位置不在位置5	
END_IF		
IF  fbMachine[1].xAutoMode AND NOT fbMachine[1].xRunning AND arTonDelay[8].Q  THEN		
		IF fbYAxisMove.iPosNumber=1 AND NOT fbYAxisMove.xMoveInPos[1] THEN station.adwAutoTip[1].15:=TRUE; END_IF//轴伺服自动时位置不在位置1	
		IF fbYAxisMove.iPosNumber=2 AND NOT fbYAxisMove.xMoveInPos[2] THEN station.adwAutoTip[1].16:=TRUE; END_IF//轴伺服自动时位置不在位置2	
		IF fbYAxisMove.iPosNumber=3 AND NOT fbYAxisMove.xMoveInPos[3] THEN station.adwAutoTip[1].17:=TRUE; END_IF//轴伺服自动时位置不在位置3	
		IF fbYAxisMove.iPosNumber=4 AND NOT fbYAxisMove.xMoveInPos[4] THEN station.adwAutoTip[1].18:=TRUE; END_IF//轴伺服自动时位置不在位置4	
		IF fbYAxisMove.iPosNumber=5 AND NOT fbYAxisMove.xMoveInPos[5] THEN station.adwAutoTip[1].19:=TRUE; END_IF//轴伺服自动时位置不在位置5	
END_IF	
IF  fbMachine[1].xAutoMode AND NOT fbMachine[1].xRunning AND arTonDelay[9].Q  THEN	
		IF fbZAxisMove.iPosNumber=1 AND NOT fbZAxisMove.xMoveInPos[1] THEN station.adwAutoTip[1].20:=TRUE; END_IF//轴伺服自动时位置不在位置1	
		IF fbZAxisMove.iPosNumber=2 AND NOT fbZAxisMove.xMoveInPos[2] THEN station.adwAutoTip[1].21:=TRUE; END_IF//轴伺服自动时位置不在位置2	
		IF fbZAxisMove.iPosNumber=3 AND NOT fbZAxisMove.xMoveInPos[3] THEN station.adwAutoTip[1].22:=TRUE; END_IF//轴伺服自动时位置不在位置3	
		IF fbZAxisMove.iPosNumber=4 AND NOT fbZAxisMove.xMoveInPos[4] THEN station.adwAutoTip[1].23:=TRUE; END_IF//轴伺服自动时位置不在位置4	
		IF fbZAxisMove.iPosNumber=5 AND NOT fbZAxisMove.xMoveInPos[5] THEN station.adwAutoTip[1].24:=TRUE; END_IF//轴伺服自动时位置不在位置5	
END_IF
IF  fbMachine[1].xAutoMode AND NOT fbMachine[1].xRunning AND arTonDelay[10].Q  THEN		
		IF fbStirAxis.iPosNumber=1 AND NOT fbStirAxis.xMoveInPos[1] THEN station.adwAutoTip[1].25:=TRUE; END_IF//轴伺服自动时位置不在位置1	
		IF fbStirAxis.iPosNumber=2 AND NOT fbStirAxis.xMoveInPos[2] THEN station.adwAutoTip[1].26:=TRUE; END_IF//轴伺服自动时位置不在位置2	
		IF fbStirAxis.iPosNumber=3 AND NOT fbStirAxis.xMoveInPos[3] THEN station.adwAutoTip[1].27:=TRUE; END_IF//轴伺服自动时位置不在位置3	
		IF fbStirAxis.iPosNumber=4 AND NOT fbStirAxis.xMoveInPos[4] THEN station.adwAutoTip[1].28:=TRUE; END_IF//轴伺服自动时位置不在位置4	
		IF fbStirAxis.iPosNumber=5 AND NOT fbStirAxis.xMoveInPos[5] THEN station.adwAutoTip[1].29:=TRUE; END_IF//轴伺服自动时位置不在位置5	
END_IF
]]></ST>
      </Implementation>
    </Action>
    <Action Name="TipManual" Id="{dcbe8fa1-97b5-4dc0-a15a-a5576c2c36db}">
      <Implementation>
        <ST><![CDATA[//--------------------------------------------ManualTip------------------------------------------------------

//-------------------------------------------气缸提示---------------------------------------------------------




/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Z_Output" Id="{a920c98e-67e5-48bd-a759-64030f6fb917}">
      <Implementation>
        <ST><![CDATA[(**************************气缸输出********************************)
QxS02HOZAdjustCyl_1WP	:=	fbHOZAdjustCyl_1.xWP_Valve	;
QxS02HOZAdjustCyl_1HP	:=	fbHOZAdjustCyl_1.xHP_Valve	;

QxS02HOZAdjustCyl_3WP	:=	fbHOZAdjustCyl_3.xWP_Valve	;
QxS02HOZAdjustCyl_3HP	:=	fbHOZAdjustCyl_3.xHP_Valve	;

QxS02ROTCylWP	:=	fbROTCyl.xWP_Valve	;
QxS02ROTCylHP	:=	fbROTCyl.xHP_Valve	;
]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="S02_LidInjecting">
      <LineId Id="40" Count="8" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="S02_LidInjecting.A_Input">
      <LineId Id="28" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="56" Count="1" />
      <LineId Id="60" Count="1" />
      <LineId Id="64" Count="1" />
      <LineId Id="67" Count="1" />
      <LineId Id="40" Count="0" />
    </LineIds>
    <LineIds Name="S02_LidInjecting.Alarm">
      <LineId Id="374" Count="32" />
      <LineId Id="266" Count="0" />
    </LineIds>
    <LineIds Name="S02_LidInjecting.Delay">
      <LineId Id="38" Count="26" />
      <LineId Id="37" Count="0" />
    </LineIds>
    <LineIds Name="S02_LidInjecting.FlowAuto">
      <LineId Id="1155" Count="5" />
      <LineId Id="1253" Count="0" />
      <LineId Id="1161" Count="0" />
      <LineId Id="2364" Count="0" />
      <LineId Id="1162" Count="3" />
      <LineId Id="1167" Count="17" />
      <LineId Id="1256" Count="0" />
      <LineId Id="2282" Count="1" />
      <LineId Id="2281" Count="0" />
      <LineId Id="1259" Count="0" />
      <LineId Id="2179" Count="0" />
      <LineId Id="2003" Count="0" />
      <LineId Id="2269" Count="0" />
      <LineId Id="2005" Count="0" />
      <LineId Id="2168" Count="0" />
      <LineId Id="2008" Count="0" />
      <LineId Id="2010" Count="0" />
      <LineId Id="2006" Count="1" />
      <LineId Id="2241" Count="0" />
      <LineId Id="2271" Count="0" />
      <LineId Id="2270" Count="0" />
      <LineId Id="2242" Count="0" />
      <LineId Id="2260" Count="1" />
      <LineId Id="1926" Count="9" />
      <LineId Id="1918" Count="0" />
      <LineId Id="1936" Count="0" />
      <LineId Id="1938" Count="0" />
      <LineId Id="1943" Count="0" />
      <LineId Id="1733" Count="0" />
      <LineId Id="1940" Count="0" />
      <LineId Id="1734" Count="1" />
      <LineId Id="1942" Count="0" />
      <LineId Id="1967" Count="0" />
      <LineId Id="1732" Count="0" />
      <LineId Id="1570" Count="0" />
      <LineId Id="1373" Count="0" />
      <LineId Id="1952" Count="0" />
      <LineId Id="2272" Count="0" />
      <LineId Id="3137" Count="0" />
      <LineId Id="3132" Count="0" />
      <LineId Id="3140" Count="4" />
      <LineId Id="3139" Count="0" />
      <LineId Id="1956" Count="1" />
      <LineId Id="2294" Count="0" />
      <LineId Id="1965" Count="0" />
      <LineId Id="3145" Count="1" />
      <LineId Id="1970" Count="1" />
      <LineId Id="1949" Count="0" />
      <LineId Id="2273" Count="0" />
      <LineId Id="2275" Count="1" />
      <LineId Id="2191" Count="0" />
      <LineId Id="2199" Count="1" />
      <LineId Id="2203" Count="0" />
      <LineId Id="2201" Count="1" />
      <LineId Id="2194" Count="0" />
      <LineId Id="3097" Count="0" />
      <LineId Id="2263" Count="0" />
      <LineId Id="2210" Count="0" />
      <LineId Id="2212" Count="0" />
      <LineId Id="2215" Count="0" />
      <LineId Id="2197" Count="0" />
      <LineId Id="1736" Count="0" />
      <LineId Id="2206" Count="1" />
      <LineId Id="1746" Count="9" />
      <LineId Id="1745" Count="0" />
      <LineId Id="1976" Count="0" />
      <LineId Id="1767" Count="0" />
      <LineId Id="1769" Count="0" />
      <LineId Id="1766" Count="0" />
      <LineId Id="1980" Count="14" />
      <LineId Id="1979" Count="0" />
      <LineId Id="1629" Count="0" />
      <LineId Id="1686" Count="3" />
      <LineId Id="1684" Count="0" />
      <LineId Id="1543" Count="0" />
      <LineId Id="1638" Count="3" />
      <LineId Id="1643" Count="0" />
      <LineId Id="1647" Count="0" />
      <LineId Id="1645" Count="0" />
      <LineId Id="1649" Count="0" />
      <LineId Id="1646" Count="0" />
      <LineId Id="2223" Count="1" />
      <LineId Id="2226" Count="0" />
      <LineId Id="2228" Count="1" />
      <LineId Id="2227" Count="0" />
      <LineId Id="1544" Count="0" />
      <LineId Id="1776" Count="0" />
      <LineId Id="1780" Count="0" />
      <LineId Id="3260" Count="1" />
      <LineId Id="3264" Count="1" />
      <LineId Id="3268" Count="0" />
      <LineId Id="3263" Count="0" />
      <LineId Id="1782" Count="0" />
      <LineId Id="1774" Count="0" />
      <LineId Id="1650" Count="0" />
      <LineId Id="2277" Count="0" />
      <LineId Id="1799" Count="0" />
      <LineId Id="2344" Count="6" />
      <LineId Id="2352" Count="2" />
      <LineId Id="2351" Count="0" />
      <LineId Id="1975" Count="0" />
      <LineId Id="1805" Count="0" />
      <LineId Id="1655" Count="0" />
      <LineId Id="1821" Count="1" />
      <LineId Id="1653" Count="0" />
      <LineId Id="2295" Count="0" />
      <LineId Id="1807" Count="0" />
      <LineId Id="1816" Count="0" />
      <LineId Id="1827" Count="0" />
      <LineId Id="1546" Count="0" />
      <LineId Id="1847" Count="0" />
      <LineId Id="2300" Count="0" />
      <LineId Id="1853" Count="1" />
      <LineId Id="1859" Count="0" />
      <LineId Id="1660" Count="0" />
      <LineId Id="1663" Count="2" />
      <LineId Id="1662" Count="0" />
      <LineId Id="1678" Count="0" />
      <LineId Id="1680" Count="2" />
      <LineId Id="1679" Count="0" />
      <LineId Id="1666" Count="0" />
      <LineId Id="1548" Count="0" />
      <LineId Id="1670" Count="0" />
      <LineId Id="1550" Count="0" />
      <LineId Id="1671" Count="1" />
      <LineId Id="1675" Count="1" />
      <LineId Id="1673" Count="0" />
      <LineId Id="1551" Count="0" />
      <LineId Id="1701" Count="13" />
      <LineId Id="1700" Count="0" />
      <LineId Id="1715" Count="0" />
      <LineId Id="1561" Count="0" />
      <LineId Id="1872" Count="0" />
      <LineId Id="1876" Count="0" />
      <LineId Id="2230" Count="1" />
      <LineId Id="1877" Count="9" />
      <LineId Id="1875" Count="0" />
      <LineId Id="1512" Count="0" />
      <LineId Id="2249" Count="0" />
      <LineId Id="2248" Count="0" />
      <LineId Id="2247" Count="0" />
      <LineId Id="2246" Count="0" />
      <LineId Id="2250" Count="0" />
      <LineId Id="1522" Count="0" />
      <LineId Id="1889" Count="0" />
      <LineId Id="1892" Count="0" />
      <LineId Id="1891" Count="0" />
      <LineId Id="1528" Count="2" />
      <LineId Id="1894" Count="0" />
      <LineId Id="2204" Count="0" />
      <LineId Id="1537" Count="0" />
      <LineId Id="2245" Count="0" />
      <LineId Id="2019" Count="0" />
      <LineId Id="2021" Count="0" />
      <LineId Id="2026" Count="1" />
      <LineId Id="2022" Count="1" />
      <LineId Id="2018" Count="0" />
      <LineId Id="2254" Count="5" />
      <LineId Id="1728" Count="0" />
      <LineId Id="2861" Count="0" />
      <LineId Id="2032" Count="0" />
      <LineId Id="2076" Count="0" />
      <LineId Id="2873" Count="0" />
      <LineId Id="2033" Count="0" />
      <LineId Id="2016" Count="0" />
      <LineId Id="2014" Count="0" />
      <LineId Id="2028" Count="2" />
      <LineId Id="2874" Count="0" />
      <LineId Id="2035" Count="0" />
      <LineId Id="3271" Count="1" />
      <LineId Id="3274" Count="0" />
      <LineId Id="3277" Count="0" />
      <LineId Id="3275" Count="0" />
      <LineId Id="3273" Count="0" />
      <LineId Id="2055" Count="0" />
      <LineId Id="3270" Count="0" />
      <LineId Id="2875" Count="0" />
      <LineId Id="2057" Count="0" />
      <LineId Id="2549" Count="0" />
      <LineId Id="2528" Count="1" />
      <LineId Id="2476" Count="0" />
      <LineId Id="2876" Count="0" />
      <LineId Id="2479" Count="0" />
      <LineId Id="2492" Count="0" />
      <LineId Id="3173" Count="0" />
      <LineId Id="3177" Count="0" />
      <LineId Id="3179" Count="0" />
      <LineId Id="3182" Count="2" />
      <LineId Id="3206" Count="0" />
      <LineId Id="3180" Count="0" />
      <LineId Id="2500" Count="0" />
      <LineId Id="3201" Count="0" />
      <LineId Id="3175" Count="0" />
      <LineId Id="3185" Count="0" />
      <LineId Id="3187" Count="9" />
      <LineId Id="3198" Count="0" />
      <LineId Id="3186" Count="0" />
      <LineId Id="2516" Count="0" />
      <LineId Id="3204" Count="0" />
      <LineId Id="2879" Count="0" />
      <LineId Id="2522" Count="0" />
      <LineId Id="2434" Count="0" />
      <LineId Id="3202" Count="0" />
      <LineId Id="2453" Count="1" />
      <LineId Id="2459" Count="0" />
      <LineId Id="2461" Count="1" />
      <LineId Id="2881" Count="0" />
      <LineId Id="2535" Count="1" />
      <LineId Id="2463" Count="2" />
      <LineId Id="2882" Count="0" />
      <LineId Id="2539" Count="0" />
      <LineId Id="3291" Count="0" />
      <LineId Id="2541" Count="0" />
      <LineId Id="2883" Count="0" />
      <LineId Id="2542" Count="0" />
      <LineId Id="3292" Count="0" />
      <LineId Id="2466" Count="0" />
      <LineId Id="2547" Count="1" />
      <LineId Id="2546" Count="0" />
      <LineId Id="2886" Count="0" />
      <LineId Id="2543" Count="0" />
      <LineId Id="2698" Count="1" />
      <LineId Id="2066" Count="0" />
      <LineId Id="2089" Count="0" />
      <LineId Id="2743" Count="0" />
      <LineId Id="2068" Count="1" />
      <LineId Id="2887" Count="0" />
      <LineId Id="2067" Count="0" />
      <LineId Id="2037" Count="0" />
      <LineId Id="2059" Count="0" />
      <LineId Id="2062" Count="0" />
      <LineId Id="2060" Count="1" />
      <LineId Id="2058" Count="0" />
      <LineId Id="2888" Count="0" />
      <LineId Id="2776" Count="3" />
      <LineId Id="2775" Count="0" />
      <LineId Id="2889" Count="0" />
      <LineId Id="2038" Count="0" />
      <LineId Id="2071" Count="0" />
      <LineId Id="2073" Count="1" />
      <LineId Id="2070" Count="0" />
      <LineId Id="2890" Count="0" />
      <LineId Id="2935" Count="0" />
      <LineId Id="2932" Count="2" />
      <LineId Id="2931" Count="0" />
      <LineId Id="2379" Count="0" />
      <LineId Id="2742" Count="0" />
      <LineId Id="2891" Count="0" />
      <LineId Id="2565" Count="0" />
      <LineId Id="2593" Count="0" />
      <LineId Id="2620" Count="0" />
      <LineId Id="2622" Count="1" />
      <LineId Id="2625" Count="0" />
      <LineId Id="2892" Count="0" />
      <LineId Id="2628" Count="1" />
      <LineId Id="2928" Count="2" />
      <LineId Id="2893" Count="0" />
      <LineId Id="2630" Count="2" />
      <LineId Id="2751" Count="0" />
      <LineId Id="2939" Count="1" />
      <LineId Id="2895" Count="0" />
      <LineId Id="2633" Count="1" />
      <LineId Id="2636" Count="5" />
      <LineId Id="2896" Count="0" />
      <LineId Id="2706" Count="0" />
      <LineId Id="3207" Count="0" />
      <LineId Id="2754" Count="0" />
      <LineId Id="2808" Count="0" />
      <LineId Id="2770" Count="4" />
      <LineId Id="2766" Count="0" />
      <LineId Id="2897" Count="0" />
      <LineId Id="2712" Count="0" />
      <LineId Id="2696" Count="0" />
      <LineId Id="3214" Count="0" />
      <LineId Id="2700" Count="1" />
      <LineId Id="3218" Count="0" />
      <LineId Id="2703" Count="0" />
      <LineId Id="3216" Count="1" />
      <LineId Id="2650" Count="0" />
      <LineId Id="3213" Count="0" />
      <LineId Id="3210" Count="0" />
      <LineId Id="3219" Count="2" />
      <LineId Id="2653" Count="0" />
      <LineId Id="3224" Count="0" />
      <LineId Id="2654" Count="0" />
      <LineId Id="2656" Count="0" />
      <LineId Id="3222" Count="0" />
      <LineId Id="2657" Count="0" />
      <LineId Id="2734" Count="0" />
      <LineId Id="2658" Count="0" />
      <LineId Id="2735" Count="0" />
      <LineId Id="2904" Count="0" />
      <LineId Id="2659" Count="0" />
      <LineId Id="3223" Count="0" />
      <LineId Id="2660" Count="2" />
      <LineId Id="2671" Count="0" />
      <LineId Id="3227" Count="0" />
      <LineId Id="2839" Count="0" />
      <LineId Id="2674" Count="0" />
      <LineId Id="2906" Count="0" />
      <LineId Id="2781" Count="0" />
      <LineId Id="3226" Count="0" />
      <LineId Id="2785" Count="1" />
      <LineId Id="2789" Count="1" />
      <LineId Id="2787" Count="0" />
      <LineId Id="2907" Count="0" />
      <LineId Id="2827" Count="0" />
      <LineId Id="2784" Count="0" />
      <LineId Id="3225" Count="0" />
      <LineId Id="2829" Count="0" />
      <LineId Id="2860" Count="0" />
      <LineId Id="3229" Count="0" />
      <LineId Id="2833" Count="0" />
      <LineId Id="3228" Count="0" />
      <LineId Id="2834" Count="0" />
      <LineId Id="2836" Count="0" />
      <LineId Id="2835" Count="0" />
      <LineId Id="2830" Count="0" />
      <LineId Id="2908" Count="0" />
      <LineId Id="2843" Count="0" />
      <LineId Id="2851" Count="0" />
      <LineId Id="2854" Count="0" />
      <LineId Id="2853" Count="0" />
      <LineId Id="2856" Count="0" />
      <LineId Id="2844" Count="0" />
      <LineId Id="2909" Count="0" />
      <LineId Id="2840" Count="0" />
      <LineId Id="2718" Count="0" />
      <LineId Id="3151" Count="0" />
      <LineId Id="3230" Count="0" />
      <LineId Id="2684" Count="2" />
      <LineId Id="3232" Count="0" />
      <LineId Id="3237" Count="0" />
      <LineId Id="3235" Count="1" />
      <LineId Id="3234" Count="0" />
      <LineId Id="3238" Count="0" />
      <LineId Id="3244" Count="3" />
      <LineId Id="3243" Count="0" />
      <LineId Id="3248" Count="0" />
      <LineId Id="3259" Count="0" />
      <LineId Id="3249" Count="0" />
      <LineId Id="3254" Count="1" />
      <LineId Id="3250" Count="0" />
      <LineId Id="3256" Count="2" />
      <LineId Id="3251" Count="0" />
      <LineId Id="2170" Count="2" />
      <LineId Id="2911" Count="0" />
      <LineId Id="2173" Count="1" />
      <LineId Id="2044" Count="0" />
      <LineId Id="2120" Count="0" />
      <LineId Id="2912" Count="0" />
      <LineId Id="2121" Count="0" />
      <LineId Id="2045" Count="0" />
      <LineId Id="2122" Count="0" />
      <LineId Id="3285" Count="0" />
      <LineId Id="3278" Count="0" />
      <LineId Id="3281" Count="0" />
      <LineId Id="3279" Count="0" />
      <LineId Id="3284" Count="0" />
      <LineId Id="3282" Count="0" />
      <LineId Id="3280" Count="0" />
      <LineId Id="3286" Count="2" />
      <LineId Id="2129" Count="0" />
      <LineId Id="2140" Count="0" />
      <LineId Id="2137" Count="1" />
      <LineId Id="2124" Count="0" />
      <LineId Id="2046" Count="0" />
      <LineId Id="2130" Count="0" />
      <LineId Id="2132" Count="0" />
      <LineId Id="2136" Count="0" />
      <LineId Id="2141" Count="1" />
      <LineId Id="2144" Count="1" />
      <LineId Id="2133" Count="0" />
      <LineId Id="2913" Count="0" />
      <LineId Id="2150" Count="0" />
      <LineId Id="2155" Count="0" />
      <LineId Id="2151" Count="2" />
      <LineId Id="2914" Count="0" />
      <LineId Id="2135" Count="0" />
      <LineId Id="2047" Count="0" />
      <LineId Id="2154" Count="0" />
      <LineId Id="2158" Count="0" />
      <LineId Id="2162" Count="0" />
      <LineId Id="2161" Count="0" />
      <LineId Id="2159" Count="0" />
      <LineId Id="2915" Count="0" />
      <LineId Id="2163" Count="4" />
      <LineId Id="2160" Count="0" />
      <LineId Id="2916" Count="0" />
      <LineId Id="2744" Count="0" />
      <LineId Id="2917" Count="0" />
      <LineId Id="2745" Count="0" />
      <LineId Id="2988" Count="2" />
      <LineId Id="2746" Count="0" />
      <LineId Id="2999" Count="0" />
      <LineId Id="3005" Count="0" />
      <LineId Id="3092" Count="1" />
      <LineId Id="3091" Count="0" />
      <LineId Id="3095" Count="1" />
      <LineId Id="3094" Count="0" />
      <LineId Id="3147" Count="1" />
      <LineId Id="3087" Count="0" />
      <LineId Id="3090" Count="0" />
      <LineId Id="3010" Count="0" />
      <LineId Id="3082" Count="0" />
      <LineId Id="3084" Count="0" />
      <LineId Id="3086" Count="0" />
      <LineId Id="3061" Count="3" />
      <LineId Id="3060" Count="0" />
      <LineId Id="3066" Count="9" />
      <LineId Id="3065" Count="0" />
      <LineId Id="3038" Count="8" />
      <LineId Id="3077" Count="0" />
      <LineId Id="3047" Count="1" />
      <LineId Id="3078" Count="3" />
      <LineId Id="3006" Count="0" />
      <LineId Id="3000" Count="0" />
      <LineId Id="3004" Count="0" />
      <LineId Id="1218" Count="2" />
      <LineId Id="1224" Count="0" />
      <LineId Id="2982" Count="0" />
      <LineId Id="2977" Count="1" />
      <LineId Id="2956" Count="1" />
      <LineId Id="3161" Count="0" />
      <LineId Id="2974" Count="1" />
      <LineId Id="2959" Count="2" />
      <LineId Id="2987" Count="0" />
      <LineId Id="2986" Count="0" />
      <LineId Id="3152" Count="0" />
      <LineId Id="3162" Count="1" />
      <LineId Id="2963" Count="1" />
      <LineId Id="3153" Count="0" />
      <LineId Id="3156" Count="0" />
      <LineId Id="3164" Count="0" />
      <LineId Id="3166" Count="2" />
      <LineId Id="3171" Count="1" />
      <LineId Id="2985" Count="0" />
      <LineId Id="1730" Count="0" />
      <LineId Id="2013" Count="0" />
    </LineIds>
    <LineIds Name="S02_LidInjecting.FlowInit">
      <LineId Id="437" Count="5" />
      <LineId Id="605" Count="0" />
      <LineId Id="443" Count="3" />
      <LineId Id="601" Count="3" />
      <LineId Id="599" Count="1" />
      <LineId Id="598" Count="0" />
      <LineId Id="470" Count="0" />
      <LineId Id="592" Count="5" />
      <LineId Id="590" Count="0" />
      <LineId Id="586" Count="3" />
      <LineId Id="584" Count="0" />
      <LineId Id="472" Count="0" />
      <LineId Id="475" Count="3" />
      <LineId Id="527" Count="0" />
      <LineId Id="529" Count="1" />
      <LineId Id="608" Count="1" />
      <LineId Id="611" Count="1" />
      <LineId Id="610" Count="0" />
      <LineId Id="531" Count="0" />
      <LineId Id="551" Count="1" />
      <LineId Id="613" Count="12" />
      <LineId Id="574" Count="0" />
      <LineId Id="480" Count="0" />
      <LineId Id="498" Count="0" />
      <LineId Id="501" Count="0" />
      <LineId Id="499" Count="1" />
      <LineId Id="497" Count="0" />
      <LineId Id="502" Count="0" />
      <LineId Id="469" Count="0" />
      <LineId Id="505" Count="0" />
      <LineId Id="504" Count="0" />
      <LineId Id="503" Count="0" />
      <LineId Id="459" Count="0" />
      <LineId Id="510" Count="0" />
      <LineId Id="513" Count="2" />
      <LineId Id="511" Count="1" />
      <LineId Id="516" Count="1" />
      <LineId Id="506" Count="0" />
      <LineId Id="462" Count="4" />
      <LineId Id="436" Count="0" />
    </LineIds>
    <LineIds Name="S02_LidInjecting.General">
      <LineId Id="403" Count="18" />
      <LineId Id="423" Count="0" />
      <LineId Id="473" Count="0" />
      <LineId Id="433" Count="0" />
      <LineId Id="586" Count="0" />
      <LineId Id="438" Count="0" />
      <LineId Id="443" Count="0" />
      <LineId Id="448" Count="0" />
      <LineId Id="532" Count="0" />
      <LineId Id="531" Count="0" />
      <LineId Id="533" Count="1" />
      <LineId Id="537" Count="0" />
      <LineId Id="585" Count="0" />
      <LineId Id="541" Count="0" />
      <LineId Id="555" Count="0" />
      <LineId Id="542" Count="0" />
      <LineId Id="546" Count="0" />
      <LineId Id="535" Count="0" />
      <LineId Id="474" Count="0" />
      <LineId Id="515" Count="0" />
      <LineId Id="561" Count="0" />
      <LineId Id="517" Count="2" />
      <LineId Id="556" Count="0" />
      <LineId Id="475" Count="0" />
      <LineId Id="560" Count="0" />
      <LineId Id="486" Count="3" />
      <LineId Id="484" Count="0" />
      <LineId Id="494" Count="1" />
      <LineId Id="559" Count="0" />
      <LineId Id="498" Count="3" />
      <LineId Id="548" Count="0" />
      <LineId Id="502" Count="0" />
      <LineId Id="558" Count="0" />
      <LineId Id="503" Count="2" />
      <LineId Id="496" Count="0" />
      <LineId Id="549" Count="0" />
      <LineId Id="476" Count="0" />
      <LineId Id="508" Count="0" />
      <LineId Id="565" Count="0" />
      <LineId Id="512" Count="0" />
      <LineId Id="567" Count="0" />
      <LineId Id="507" Count="0" />
      <LineId Id="557" Count="0" />
      <LineId Id="490" Count="0" />
      <LineId Id="550" Count="0" />
      <LineId Id="521" Count="0" />
      <LineId Id="523" Count="3" />
      <LineId Id="528" Count="0" />
      <LineId Id="522" Count="0" />
      <LineId Id="551" Count="0" />
      <LineId Id="491" Count="0" />
      <LineId Id="562" Count="0" />
      <LineId Id="530" Count="0" />
      <LineId Id="478" Count="0" />
      <LineId Id="441" Count="0" />
      <LineId Id="625" Count="0" />
      <LineId Id="918" Count="0" />
      <LineId Id="923" Count="0" />
      <LineId Id="978" Count="1" />
      <LineId Id="981" Count="1" />
      <LineId Id="946" Count="1" />
      <LineId Id="922" Count="0" />
      <LineId Id="844" Count="8" />
      <LineId Id="837" Count="0" />
      <LineId Id="613" Count="0" />
      <LineId Id="643" Count="0" />
      <LineId Id="650" Count="0" />
      <LineId Id="680" Count="3" />
      <LineId Id="873" Count="4" />
      <LineId Id="879" Count="0" />
      <LineId Id="830" Count="2" />
      <LineId Id="651" Count="1" />
      <LineId Id="675" Count="0" />
      <LineId Id="853" Count="0" />
      <LineId Id="659" Count="3" />
      <LineId Id="948" Count="0" />
      <LineId Id="648" Count="0" />
      <LineId Id="750" Count="0" />
      <LineId Id="854" Count="0" />
      <LineId Id="755" Count="0" />
      <LineId Id="753" Count="0" />
      <LineId Id="756" Count="0" />
      <LineId Id="855" Count="0" />
      <LineId Id="871" Count="0" />
      <LineId Id="965" Count="0" />
      <LineId Id="759" Count="0" />
      <LineId Id="676" Count="0" />
      <LineId Id="856" Count="0" />
      <LineId Id="778" Count="0" />
      <LineId Id="689" Count="1" />
      <LineId Id="743" Count="0" />
      <LineId Id="684" Count="0" />
      <LineId Id="779" Count="2" />
      <LineId Id="678" Count="0" />
      <LineId Id="696" Count="0" />
      <LineId Id="881" Count="0" />
      <LineId Id="809" Count="0" />
      <LineId Id="880" Count="0" />
      <LineId Id="882" Count="1" />
      <LineId Id="697" Count="3" />
      <LineId Id="810" Count="2" />
      <LineId Id="701" Count="0" />
      <LineId Id="858" Count="0" />
      <LineId Id="702" Count="1" />
      <LineId Id="997" Count="1" />
      <LineId Id="996" Count="0" />
      <LineId Id="695" Count="0" />
      <LineId Id="686" Count="0" />
      <LineId Id="859" Count="0" />
      <LineId Id="691" Count="3" />
      <LineId Id="645" Count="0" />
      <LineId Id="860" Count="0" />
      <LineId Id="709" Count="0" />
      <LineId Id="705" Count="1" />
      <LineId Id="704" Count="0" />
      <LineId Id="646" Count="0" />
      <LineId Id="708" Count="0" />
      <LineId Id="707" Count="0" />
      <LineId Id="710" Count="0" />
      <LineId Id="712" Count="0" />
      <LineId Id="711" Count="0" />
      <LineId Id="647" Count="0" />
      <LineId Id="861" Count="0" />
      <LineId Id="715" Count="2" />
      <LineId Id="713" Count="0" />
      <LineId Id="719" Count="0" />
      <LineId Id="862" Count="0" />
      <LineId Id="720" Count="0" />
      <LineId Id="952" Count="0" />
      <LineId Id="961" Count="0" />
      <LineId Id="959" Count="1" />
      <LineId Id="962" Count="1" />
      <LineId Id="956" Count="1" />
      <LineId Id="784" Count="0" />
      <LineId Id="722" Count="0" />
      <LineId Id="786" Count="1" />
      <LineId Id="884" Count="1" />
      <LineId Id="788" Count="0" />
      <LineId Id="721" Count="0" />
      <LineId Id="958" Count="0" />
      <LineId Id="983" Count="0" />
      <LineId Id="992" Count="0" />
      <LineId Id="995" Count="0" />
      <LineId Id="718" Count="0" />
      <LineId Id="724" Count="0" />
      <LineId Id="863" Count="0" />
      <LineId Id="789" Count="0" />
      <LineId Id="725" Count="0" />
      <LineId Id="790" Count="1" />
      <LineId Id="886" Count="1" />
      <LineId Id="792" Count="0" />
      <LineId Id="726" Count="1" />
      <LineId Id="864" Count="0" />
      <LineId Id="793" Count="0" />
      <LineId Id="735" Count="0" />
      <LineId Id="730" Count="0" />
      <LineId Id="738" Count="2" />
      <LineId Id="794" Count="0" />
      <LineId Id="799" Count="3" />
      <LineId Id="795" Count="0" />
      <LineId Id="893" Count="4" />
      <LineId Id="796" Count="2" />
      <LineId Id="741" Count="0" />
      <LineId Id="865" Count="0" />
      <LineId Id="803" Count="0" />
      <LineId Id="744" Count="2" />
      <LineId Id="742" Count="0" />
      <LineId Id="898" Count="1" />
      <LineId Id="826" Count="0" />
      <LineId Id="804" Count="0" />
      <LineId Id="807" Count="0" />
      <LineId Id="968" Count="0" />
      <LineId Id="970" Count="0" />
      <LineId Id="808" Count="0" />
      <LineId Id="900" Count="0" />
      <LineId Id="902" Count="1" />
      <LineId Id="818" Count="1" />
      <LineId Id="904" Count="0" />
      <LineId Id="912" Count="1" />
      <LineId Id="973" Count="0" />
      <LineId Id="828" Count="0" />
      <LineId Id="815" Count="0" />
      <LineId Id="805" Count="0" />
      <LineId Id="905" Count="0" />
      <LineId Id="907" Count="1" />
      <LineId Id="910" Count="1" />
      <LineId Id="909" Count="0" />
      <LineId Id="806" Count="0" />
      <LineId Id="927" Count="1" />
      <LineId Id="940" Count="0" />
      <LineId Id="949" Count="0" />
      <LineId Id="929" Count="3" />
      <LineId Id="944" Count="1" />
      <LineId Id="941" Count="0" />
      <LineId Id="933" Count="3" />
      <LineId Id="974" Count="0" />
      <LineId Id="937" Count="0" />
      <LineId Id="825" Count="0" />
      <LineId Id="926" Count="0" />
      <LineId Id="761" Count="0" />
      <LineId Id="866" Count="0" />
      <LineId Id="762" Count="4" />
      <LineId Id="867" Count="0" />
      <LineId Id="767" Count="1" />
      <LineId Id="748" Count="0" />
      <LineId Id="769" Count="0" />
      <LineId Id="775" Count="0" />
      <LineId Id="822" Count="0" />
      <LineId Id="644" Count="0" />
      <LineId Id="598" Count="0" />
      <LineId Id="588" Count="0" />
    </LineIds>
    <LineIds Name="S02_LidInjecting.ILC">
      <LineId Id="234" Count="4" />
      <LineId Id="311" Count="9" />
      <LineId Id="307" Count="0" />
      <LineId Id="290" Count="0" />
      <LineId Id="323" Count="23" />
      <LineId Id="274" Count="0" />
      <LineId Id="347" Count="2" />
      <LineId Id="362" Count="0" />
      <LineId Id="351" Count="6" />
      <LineId Id="359" Count="0" />
      <LineId Id="358" Count="0" />
      <LineId Id="360" Count="0" />
      <LineId Id="364" Count="0" />
      <LineId Id="363" Count="0" />
    </LineIds>
    <LineIds Name="S02_LidInjecting.TipAuto">
      <LineId Id="118" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="205" Count="4" />
      <LineId Id="146" Count="0" />
      <LineId Id="148" Count="8" />
      <LineId Id="185" Count="1" />
      <LineId Id="184" Count="0" />
      <LineId Id="188" Count="1" />
      <LineId Id="187" Count="0" />
      <LineId Id="157" Count="3" />
      <LineId Id="166" Count="11" />
      <LineId Id="190" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="192" Count="5" />
      <LineId Id="211" Count="0" />
      <LineId Id="199" Count="3" />
      <LineId Id="191" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="183" Count="0" />
    </LineIds>
    <LineIds Name="S02_LidInjecting.TipManual">
      <LineId Id="137" Count="1" />
      <LineId Id="176" Count="0" />
      <LineId Id="262" Count="1" />
      <LineId Id="246" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="41" Count="0" />
    </LineIds>
    <LineIds Name="S02_LidInjecting.Z_Output">
      <LineId Id="2" Count="0" />
      <LineId Id="21" Count="1" />
      <LineId Id="24" Count="2" />
      <LineId Id="28" Count="2" />
      <LineId Id="20" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>